.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Time::JulianDay 3"
.TH Time::JulianDay 3 "2011-05-06" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::JulianDay \-\- Julian calendar manipulations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Time::JulianDay
\&
\&        $jd = julian_day($year, $month_1_to_12, $day)
\&        $jd = local_julian_day($seconds_since_1970);
\&        $jd = gm_julian_day($seconds_since_1970);
\&        ($year, $month_1_to_12, $day) = inverse_julian_day($jd)
\&        $dow = day_of_week($jd) 
\&
\&        print (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[$dow];
\&
\&        $seconds_since_jan_1_1970 = jd_secondslocal($jd, $hour, $min, $sec)
\&        $seconds_since_jan_1_1970 = jd_secondsgm($jd, $hour, $min, $sec)
\&        $seconds_since_jan_1_1970 = jd_timelocal($sec,$min,$hours,$mday,$month_0_to_11,$year)
\&        $seconds_since_jan_1_1970 = jd_timegm($sec,$min,$hours,$mday,$month_0_to_11,$year)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
JulianDay is a package that manipulates dates as number of days since 
some time a long time ago.  It's easy to add and subtract time
using julian days...
.PP
The day_of_week returned by \fIday_of_week()\fR is 0 for Sunday, and 6 for
Saturday and everything else is in between.
.SH "ERRATA"
.IX Header "ERRATA"
Time::JulianDay is not a correct implementation.  There are two
problems.  The first problem is that Time::JulianDay only works
with integers.  Julian Day can be fractional to represent time
within a day.  If you call \fIinverse_julian_day()\fR with a non-integer
time, it will often give you an incorrect result.
.PP
The second problem is that Julian Days start at noon rather than
midnight.  The \fIjulian_day()\fR function returns results that are too
large by 0.5.
.PP
What to do about these problems is currently open for debate.  I'm
tempted to leave the current functions alone and add a second set
with more accurate behavior.
.PP
There is another implementation in Astro::Time that may be more accurate.
.SH "GENESIS"
.IX Header "GENESIS"
Written by David Muir Sharnoff <cpan@dave.sharnoff.org> with help from
previous work by 
Kurt Jaeger aka \s-1PI\s0 <zrzr0111@helpdesk.rus.uni\-stuttgart.de>
 	based on postings from: Ian Miller <ian_m@cix.compulink.co.uk>;
Gary Puckering <garyp%cognos.uucp@uunet.uu.net>
	based on Collected Algorithms of the \s-1ACM\s0 ?;
and the unknown-to-me author of Time::Local.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 1996\-1999 David Muir Sharnoff.  License hereby
granted for anyone to use, modify or redistribute this module at
their own risk.  Please feed useful changes back to cpan@dave.sharnoff.org.
