.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::Mail 3"
.TH Mojolicious::Plugin::Mail 3 "2018-08-17" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::Mail \- Mojolicious Plugin for send mail
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin \*(Aqmail\*(Aq;
\&
\&  # Mojolicious with config
\&  $self\->plugin(mail => {
\&    from => \*(Aqsharifulin@gmail.com\*(Aq,
\&    type => \*(Aqtext/html\*(Aq,
\&  });
\&
\&  # in controller
\&  $self\->mail(
\&    to      => \*(Aqsharifulin@gmail.com\*(Aq,
\&    subject => \*(AqTest\*(Aq,
\&    data    => \*(Aquse Perl or die;\*(Aq,
\&  );
\&
\&  # in controller, using render
\&  $self\->mail(to => \*(Aqsharifulin@gmail.com\*(Aq, template => \*(Aqcontroller/action\*(Aq, format => \*(Aqmail\*(Aq);
\&
\&  # template: controller/action.mail.ep
\&  % stash subject => \*(AqTest\*(Aq;
\&  use Perl or die;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicous::Plugin::Mail is a plugin for Mojolicious apps to send mail using MIME::Lite.
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicious::Plugin::Mail contains two helpers: \fImail\fR and \fIrender_mail\fR.
.ie n .SS """mail"""
.el .SS "\f(CWmail\fP"
.IX Subsection "mail"
.Vb 4
\&  # simple interface
\&  $self\->mail(
\&      to       => \*(Aqsharifulin@gmail.com\*(Aq,
\&      from     => \*(Aqsharifulin@gmail.com\*(Aq,
\&      
\&      reply_to => \*(Aqreply_to+sharifulin@gmail.com\*(Aq,
\&      
\&      cc       => \*(Aq..\*(Aq,
\&      bcc      => \*(Aq..\*(Aq,
\&      
\&      type     => \*(Aqtext/plain\*(Aq,
\&
\&      subject  => \*(AqTest\*(Aq,
\&      data     => \*(Aquse Perl or die;\*(Aq,
\&  );
\&
\&  # interface as MIME::Lite
\&  $self\->mail(
\&      # test mode
\&      test   => 1,
\&      
\&      # as MIME::Lite\->new( ... )
\&      mail   => {
\&        To       => \*(Aqsharifulin@gmail.com\*(Aq,
\&        Subject  => \*(AqTest\*(Aq,
\&        Data     => \*(Aquse Perl or die;\*(Aq,
\&        
\&        # add credentials parameters
\&        AuthUser => \*(Aqusername\*(Aq,
\&        AuthPass => \*(Aqpassword\*(Aq,
\&      },
\&
\&      attach => [
\&        # as MIME::Lite\->attach( .. )
\&        { ... },
\&        ...
\&      },
\&
\&      headers => [
\&        # as MIME::Lite\->add( .. )
\&        { ... },
\&        ...
\&      },
\&
\&      attr => [
\&        # as MIME::Lite\->attr( .. )
\&        { ... },
\&        ...
\&      },
\&  );
.Ve
.PP
Build and send email, return mail as string.
.PP
Supported parameters:
.IP "\(bu" 16
to
.Sp
Header 'To' of mail.
.IP "\(bu" 16
from
.Sp
Header 'From' of mail.
.IP "\(bu" 16
reply_to
.Sp
Header 'Reply\-To' of mail.
.IP "\(bu" 16
cc
.Sp
Header 'Cc' of mail.
.IP "\(bu" 16
bcc
.Sp
Header 'Bcc' of mail.
.IP "\(bu" 16
type
.Sp
Content type of mail, default is conf's type.
.IP "\(bu" 16
subject
.Sp
Header 'Subject' of mail.
.IP "\(bu" 16
data
.Sp
Content of mail
.IP "\(bu" 16
mail
.Sp
Hashref, containts parameters as \fInew(\s-1PARAMHASH\s0)\fR. See MIME::Lite.
.IP "\(bu" 16
attach
.Sp
Arrayref of hashref, hashref containts parameters as \fIattach(\s-1PARAMHASH\s0)\fR. See MIME::Lite.
.IP "\(bu" 16
headers
.Sp
Arrayref of hashref, hashref containts parameters as \fIadd(\s-1TAG, VALUE\s0)\fR. See MIME::Lite.
.IP "\(bu" 16
attr
.Sp
Arrayref of hashref, hashref containts parameters as \fIattr(\s-1ATTR, VALUE\s0)\fR. See MIME::Lite.
.IP "\(bu" 16
test
.Sp
Test mode, don't send mail.
.IP "\(bu" 16
charset
.Sp
Charset of mail, default charset is \s-1UTF\-8.\s0
.IP "\(bu" 16
mimeword
.Sp
Using mimeword or not, default value is 1.
.IP "\(bu" 16
nomailer
.Sp
No using 'X\-Mailer' header of mail, default value is 1.
.PP
If no subject, uses value of stash parameter 'subject'.
.PP
If no data, call \fIrender_mail\fR helper with all stash parameters.
.ie n .SS """render_mail"""
.el .SS "\f(CWrender_mail\fP"
.IX Subsection "render_mail"
.Vb 1
\&  my $data = $self\->render_mail(\*(Aquser/signup\*(Aq);
\&
\&  # or use stash params
\&  my $data = $self\->render_mail(template => \*(Aquser/signup\*(Aq, user => $user);
.Ve
.PP
Render mail template and return data, mail template format is \fImail\fR, i.e. \fIuser/signup.mail.ep\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Plugin::Mail contains one attribute \- conf.
.ie n .SS """conf"""
.el .SS "\f(CWconf\fP"
.IX Subsection "conf"
.Vb 1
\&  $plugin\->conf;
.Ve
.PP
Config of mail plugin, hashref.
.PP
Keys of conf:
.IP "\(bu" 6
from
.Sp
From address, default value is \fItest\-mail\-plugin@mojolicio.us\fR.
.IP "\(bu" 6
encoding
.Sp
Encoding of Subject and any Data, value is MIME::Lite content transfer encoding <http://search.cpan.org/~rjbs/MIME\-Lite\-3.027/lib/MIME/Lite.pm#Content_transfer_encodings>
Default value is \fIbase64\fR.
.IP "\(bu" 6
charset
.Sp
Default charset of Subject and any Data, default value is \fI\s-1UTF\-8\s0\fR.
.IP "\(bu" 6
type
.Sp
Default type of Data, default value is \fItext/plain\fR.
.IP "\(bu" 6
how
.Sp
\&\s-1HOW\s0 parameter of MIME::Lite::send: \fIsendmail\fR or \fIsmtp\fR.
.IP "\(bu" 6
howargs
.Sp
\&\s-1HOWARGS\s0 parameter of MIME::Lite::send (arrayref).
.PP
.Vb 7
\&  my $conf = {
\&    from     => \*(Aqsharifulin@gmail.com,
\&    encoding => \*(Aqbase64\*(Aq,
\&    type     => \*(Aqtext/html\*(Aq,
\&    how      => \*(Aqsendmail\*(Aq,
\&    howargs  => [ \*(Aq/usr/sbin/sendmail \-t\*(Aq ],
\&  };
\&
\&  # in Mojolicious app
\&  $self\->plugin(mail => $conf);
\&  
\&  # in Mojolicious::Lite app
\&  plugin mail => $conf;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::Mail inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register($app, $conf);
.Ve
.PP
Register plugin hooks in Mojolicious application.
.ie n .SS """build"""
.el .SS "\f(CWbuild\fP"
.IX Subsection "build"
.Vb 1
\&  $plugin\->build( mail => { ... }, ... );
.Ve
.PP
Build mail using MIME::Lite and MIME::EncWords and return MIME::Lite object.
.SH "TEST MODE"
.IX Header "TEST MODE"
Mojolicious::Plugin::Mail has test mode, no send mail.
.PP
.Vb 2
\&  # all mail don\*(Aqt send mail
\&  BEGIN { $ENV{MOJO_MAIL_TEST} = 1 };
\&
\&  # or only once
\&  $self\->mail(
\&    test => 1,
\&    to   => \*(Aq...\*(Aq,
\&  );
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The Mojolicious::Lite example you can see in \fIexample/test.pl\fR.
.PP
Simple interface for send plain mail:
.PP
.Vb 2
\&  get \*(Aq/simple\*(Aq => sub {
\&    my $self = shift;
\&    
\&    $self\->mail(
\&      to      => \*(Aqsharifulin@gmail.com\*(Aq,
\&      type    => \*(Aqtext/plain\*(Aq,
\&      subject => \*(AqXXXX XXXXXX\*(Aq,
\&      data    => \*(AqXXXXXX!\*(Aq,
\&    );
\&  };
.Ve
.PP
Simple send mail:
.PP
.Vb 2
\&  get \*(Aq/simple\*(Aq => sub {
\&    my $self = shift;
\&    
\&    $self\->mail(
\&      mail => {
\&        To      => \*(Aqsharifulin@gmail.com\*(Aq,
\&        Subject => \*(AqXXXX XXXXXX\*(Aq,
\&        Data    => "<p>XXXXXX!</p>",
\&      },
\&    );
\&  };
.Ve
.PP
Simple send mail with test mode:
.PP
.Vb 2
\&  get \*(Aq/simple2\*(Aq => sub {
\&    my $self = shift;
\&    
\&    my $mail = $self\->mail(
\&      test => 1,
\&      mail => {
\&        To      => \*(Aq"XXXXXXXX XXXXXXXXX" sharifulin@gmail.com\*(Aq,
\&        Cc      => \*(Aq"XXXXXXXX XXXXXXXXX" <sharifulin@gmail.com>, Anatoly Sharifulin sharifulin@gmail.com\*(Aq,
\&        Bcc     => \*(Aqsharifulin@gmail.com\*(Aq,
\&        Subject => \*(AqXXXX XXXXXX\*(Aq,
\&        Type    => \*(Aqtext/plain\*(Aq,
\&        Data    => "<p>XXXXXX!</p>",
\&      },
\&    );
\&    
\&    warn $mail;
\&  };
.Ve
.PP
Mail with binary attachcment, charset is windows\-1251, mimewords off and mail has custom header:
.PP
.Vb 2
\&  get \*(Aq/attach\*(Aq => sub {
\&    my $self = shift;
\&    
\&    my $mail = $self\->mail(
\&      charset  => \*(Aqwindows\-1251\*(Aq,
\&      mimeword => 0,
\&
\&      mail => {
\&        To      => \*(Aqsharifulin@gmail.com\*(Aq,
\&        Subject => \*(AqTest attach\*(Aq,
\&        Type    => \*(Aqmultipart/mixed\*(Aq
\&      },
\&      attach => [
\&        {
\&          Data => \*(AqAny data\*(Aq,
\&        },
\&        {
\&          Type        => \*(AqBINARY\*(Aq,
\&          Filename    => \*(Aqcrash.data\*(Aq,
\&          Disposition => \*(Aqattachment\*(Aq,
\&          Data        => \*(Aqbinary data binary data binary data binary data binary data\*(Aq,
\&        },
\&      ],
\&      headers => [ { \*(AqX\-My\-Header\*(Aq => \*(AqMojolicious\*(Aq } ],
\&    );
\&  };
.Ve
.PP
Multipart mixed mail:
.PP
.Vb 2
\&  get \*(Aq/multi\*(Aq => sub {
\&    my $self = shift;
\&    
\&    $self\->mail(
\&      mail => {
\&        To      => \*(Aqsharifulin@gmail.com\*(Aq,
\&        Subject => \*(AqXXXXXX\*(Aq,
\&        Type    => \*(Aqmultipart/mixed\*(Aq
\&      },
\&
\&      attach => [
\&        {
\&          Type     => \*(AqTEXT\*(Aq,
\&          Encoding => \*(Aq7bit\*(Aq,
\&          Data     => "Just a quick note to say hi!"
\&        },
\&        {
\&          Type     => \*(Aqimage/gif\*(Aq,
\&          Path     => $0
\&        },
\&        {
\&          Type     => \*(Aqx\-gzip\*(Aq,
\&          Path     => "gzip < $0 |",
\&          ReadNow  => 1,
\&          Filename => "somefile.zip"
\&        },
\&      ],
\&    );
\&  };
.Ve
.PP
Render mail using simple interface and Reply-To header:
.PP
.Vb 3
\&  get \*(Aq/render_simple\*(Aq => sub {
\&    my $self = shift;
\&    my $mail = $self\->mail(to => \*(Aqsharifulin@gmail.com\*(Aq, reply_to => \*(Aqreply_to+sharifulin@gmail.com\*(Aq);
\&
\&    $self\->render(ok => 1, mail => $mail);
\&} => \*(Aqrender\*(Aq;
.Ve
.PP
Mail with render data and subject from stash param:
.PP
.Vb 2
\&  get \*(Aq/render\*(Aq => sub {
\&    my $self = shift;
\&
\&    my $data = $self\->render_mail(\*(Aqrender\*(Aq);
\&    $self\->mail(
\&      mail => {
\&        To      => \*(Aqsharifulin@gmail.com\*(Aq,
\&        Subject => $self\->stash(\*(Aqsubject\*(Aq),
\&        Data    => $data,
\&      },
\&    );
\&  } => \*(Aqrender\*(Aq;
\&
\&  _\|_DATA_\|_
\&
\&  @@ render.html.ep
\&  <p>Hello render!</p>
\&  
\&  @@ render.mail.ep
\&  % stash \*(Aqsubject\*(Aq => \*(AqXXXXXX render\*(Aq;
\&  
\&  <p>XXXXXX mail render!</p>
.Ve
.PP
Send email via remote \s-1SMTP\s0 server.
.PP
.Vb 12
\&  # in main
\&  $self\->plugin(
\&    mail => {
\&      from    => \*(Aqinfo@host.example\*(Aq,
\&      type    => \*(Aqtext/html\*(Aq,
\&      how     => \*(Aqsmtp\*(Aq,
\&      howargs => [ \*(Aqmail.host.example\*(Aq,
\&                      AuthUser => \*(Aqme@host.example\*(Aq,
\&                      AuthPass => \*(Aq123xyz\*(Aq,
\&                 ],
\&    }
\&  );
\&  
\&  # in controller
\&  $self\->mail(
\&    to      => \*(Aqfriend@hishost.example\*(Aq,
\&    subject => \*(AqTest\*(Aq,
\&    data    => \*(Aquse Perl or die;\*(Aq,
\&  );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::Lite MIME::EncWords Mojolicious Mojolicious::Guides <http://mojolicious.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Anatoly Sharifulin <sharifulin@gmail.com>
.SH "THANKS"
.IX Header "THANKS"
Alex Kapranoff <kapranoff@gmail.com>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-mojolicious\-plugin\-mail at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.htMail?Queue=Mojolicious\-Plugin\-Mail>.  We will be notified, and then you'll
automatically be notified of progress on your bug as we make changes.
.IP "\(bu" 5
Github
.Sp
<http://github.com/sharifulin/mojolicious\-plugin\-mail/tree/master>
.IP "\(bu" 5
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.htMail?Dist=Mojolicious\-Plugin\-Mail>
.IP "\(bu" 5
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Mojolicious\-Plugin\-Mail>
.IP "\(bu" 5
\&\s-1CPANTS: CPAN\s0 Testing Service
.Sp
<http://cpants.perl.org/dist/overview/Mojolicious\-Plugin\-Mail>
.IP "\(bu" 5
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Mojolicious\-Plugin\-Mail>
.IP "\(bu" 5
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Mojolicious\-Plugin\-Mail>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2010\-2013 by Anatoly Sharifulin.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
