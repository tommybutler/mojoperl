.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Test::Spec::Mocks 3"
.TH Test::Spec::Mocks 3 "2017-11-21" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Spec::Mocks \- Object Simulation Plugin for Test::Spec
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Test::Spec;
\&  use base qw(Test::Spec);
\&
\&  use My::RSS::Tool;    # this is what we\*(Aqre testing
\&  use LWP::UserAgent;
\&
\&  describe "RSS tool" => sub {
\&    it "should fetch and parse an RSS feed" => sub {
\&      my $xml = load_rss_fixture();
\&      LWP::Simple\->expects(\*(Aqget\*(Aq)\->returns($xml);
\&
\&      # calls LWP::Simple::get, but returns our $xml instead
\&      my @stories = My::RSS::Tool\->run;
\&
\&      is_deeply(\e@stories, load_stories_fixture());
\&    };
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Spec::Mocks is a plugin for Test::Spec that provides mocking and
stubbing of objects, individual methods and plain subroutines on both
object instances and classes. This module is inspired by and heavily
borrows from Mocha, a library for the Ruby programming language. Mocha
itself is inspired by JMock.
.PP
Mock objects provide a way to simulate the behavior of real objects, while
providing consistent, repeatable results. This is very useful when you need
to test a function whose results are dependent upon an external factor that
is normally uncontrollable (like the time of day). Mocks also allow you to
test your code in isolation, a tenet of unit testing.
.PP
There are many other reasons why mock objects might come in handy. See the
Mock objects <http://en.wikipedia.org/wiki/Mock_object> article at Wikipedia
for lots more examples and more in-depth coverage of the philosophy behind
object mocking.
.SS "Ecosystem"
.IX Subsection "Ecosystem"
Test::Spec::Mocks is currently only usable from within tests built with
the Test::Spec \s-1BDD\s0 framework.
.SS "Terminology"
.IX Subsection "Terminology"
Familiarize yourself with these terms:
.IP "\(bu" 4
Stub object
.Sp
A stub object is an object created specifically to return canned responses for
a specific set of methods. These are created with the stub function.
.IP "\(bu" 4
Mock object
.Sp
Mock objects are similar to stub objects, but are programmed with both
prepared responses and expectations for how they will be called. If the
expectations are not met, they raise an exception to indicate that the test
failed. Mock objects are created with the mock function.
.IP "\(bu" 4
Stubbed method
.Sp
Stubbed methods temporarily replace existing methods on a class or object
instance. This is useful when you only want to override a subset of an object
or class's behavior. For example, you might want to override the \f(CW\*(C`do\*(C'\fR method
of a \s-1DBI\s0 handle so it doesn't make changes to your database, but still need
the handle to respond as usual to the \f(CW\*(C`quote\*(C'\fR method.  You'll stub
methods using the stubs method.
.IP "\(bu" 4
Mocked method
.Sp
If you've been reading up to this point, this will be no surprise.  Mocked
methods are just like stubbed methods, but they come with expectations that
will raise an exception if not met. For example, you can mock a \f(CW\*(C`save\*(C'\fR method
on an object to ensure it is called by the code you are testing, while
preventing the data from actually being committed to disk in your test. Use
the expects method to create mock methods.
.IP "\(bu" 4
\&\*(L"stub\*(R", \*(L"mock\*(R"
.Sp
Depending on context, these can refer to stubbed objects and methods, or
mocked objects and methods, respectively.
.SS "Using stub objects (anonymous stubs)"
.IX Subsection "Using stub objects (anonymous stubs)"
Sometimes the code you're testing requires that you pass it an object that
conforms to a specific interface. For example, you are testing a console
prompting library, but you don't want to require a real person to stand by,
waiting to type answers into the console. The library requires an object
that returns a string when the \f(CW\*(C`read_line\*(C'\fR method is called.
.PP
You could create a class specifically for returning test console input. But
why do that? You can create a stub object in one line:
.PP
.Vb 2
\&  describe "An Asker" => sub {
\&    my $asker = Asker\->new;
\&
\&    it "returns true when a yes_or_no question is answered \*(Aqyes\*(Aq" => sub {
\&      my $console_stub = stub(read_line => "yes");
\&      # $console_stub\->read_line returns "yes"
\&      ok( $asker\->yes_or_no($console_stub, "Am I awesome?") );
\&    };
\&
\&    it "returns false when a yes_or_no question is answered \*(Aqno\*(Aq" => sub {
\&      my $console_stub = stub(read_line => "no");
\&      ok( ! $asker\->yes_or_no($console_stub, "Am I second best?") );
\&    };
\&  };
.Ve
.PP
Stubs can also take subroutine references.  This is useful when the behavior
you need to mimic is a little more complex.
.PP
.Vb 7
\&  it "keeps asking until it gets an answer" => sub {
\&    my @answers = (undef, "yes");
\&    my $console_stub = stub(read_line => sub { shift @answers });
\&    # when console_stub is called the first time, it returns undef
\&    # the second time returns "yes"
\&    ok( $asker\->yes_or_no($console_stub, "Do I smell nice?") );
\&  };
.Ve
.SS "Using mock objects"
.IX Subsection "Using mock objects"
If you want to take your tests one step further, you can use mock objects
instead of stub objects. Mocks ensure the methods you expect to be called
actually are called. If they aren't, the mock will raise an exception which
causes your test to fail.
.PP
In this example, we are testing that \f(CW\*(C`read_line\*(C'\fR is called once and only
once (the default for mocks).
.PP
.Vb 7
\&  it "returns true when a yes_or_no question is answered \*(Aqyes\*(Aq" => sub {
\&    my $console_mock = mock();
\&    $console_mock\->expects(\*(Aqread_line\*(Aq)
\&                 \->returns("yes");
\&    # $console_mock\->read_line returns "yes"
\&    ok( $asker\->yes_or_no($console_mock, "Am I awesome?") );
\&  };
.Ve
.PP
If Asker's \f(CW\*(C`yes_or_no\*(C'\fR method doesn't call \f(CW\*(C`read_line\*(C'\fR on our mock exactly
one time, the test would fail with a message like:
.PP
.Vb 1
\&  expected read_line to be called exactly 1 time, but it was called 0 times
.Ve
.PP
You can specify how many times your mock should be called with \*(L"exactly\*(R":
.PP
.Vb 10
\&  it "keeps asking until it gets an answer" => sub {
\&    my @answers = (undef, "yes");
\&    my $console_mock = mock();
\&    $console_mock\->expects(\*(Aqread_line\*(Aq)
\&                 \->returns(sub { shift @answers })
\&                 \->exactly(2);
\&    # when console_mock is called the first time, it returns undef
\&    # the second time returns "yes"
\&    ok( $asker\->yes_or_no($console_mock, "Do I smell nice?") );
\&  };
.Ve
.PP
If you want something more flexible than \*(L"exactly\*(R", you can choose from
\&\*(L"at_least\*(R", \*(L"at_most\*(R", \*(L"any_number\*(R" and others. See \*(L"\s-1EXPECTATION ADJUSTMENT METHODS\*(R"\s0.
.SS "Stubbing methods"
.IX Subsection "Stubbing methods"
Sometimes you want to override just a small subset of an object's behavior.
.PP
.Vb 3
\&  describe "The old audit system" => sub {
\&    my $dbh;
\&    before sub { $dbh = SomeExternalClass\->get_dbh };
\&
\&    it "executes the expected sql" => sub {
\&      my $sql;
\&      $dbh\->stubs(do => sub { $sql = shift; return 1 });
\&
\&      # $dbh\->do("foo") now sets $sql to "foo"
\&      # $dbh\->quote still does what it normally would
\&
\&      audit_event($dbh, "server crash, oh noes!!");
\&
\&      like( $sql, qr/insert into audit_event.*\*(Aqserver crash, oh noes!!!\*(Aq/ );
\&    };
\&  };
.Ve
.PP
You can also stub class methods:
.PP
.Vb 2
\&  # 1977\-05\-26T14:11:55
\&  my $event_datetime = DateTime\->new(from_epoch => 0xdeafcab);
\&
\&  it "should tag each audit event with the current time" => sub {
\&    DateTime\->stubs(\*(Aqnow\*(Aq => sub { $event_datetime });
\&    is( audit_timestamp(), \*(Aq19770526.141155\*(Aq );
\&  };
.Ve
.SS "Mocking methods"
.IX Subsection "Mocking methods"
Mocked methods are to stubbed methods as mock objects are to stub objects.
.PP
.Vb 2
\&  it "executes the expected sql" => sub {
\&    $dbh\->expects(\*(Aqdo\*(Aq)\->returns(sub { $sql = shift; return 1 });
\&
\&    # $dbh\->do("foo") now sets $sql to "foo"
\&    # $dbh\->quote still does what it normally would
\&
\&    audit_event($dbh, "server crash, oh noes!!");
\&    like( $sql, qr/insert into audit_event.*\*(Aqserver crash, oh noes!!!\*(Aq/ );
\&
\&    # if audit_event doesn\*(Aqt call $dbh\->do exactly once, KABOOM!
\&  };
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "\fIstub()\fR" 4
.IX Item "stub()"
.PD 0
.ie n .IP "stub($method_name => $result, ...)" 4
.el .IP "stub($method_name => \f(CW$result\fR, ...)" 4
.IX Item "stub($method_name => $result, ...)"
.ie n .IP "stub($method_name => sub { $result }, ...)" 4
.el .IP "stub($method_name => sub { \f(CW$result\fR }, ...)" 4
.IX Item "stub($method_name => sub { $result }, ...)"
.ie n .IP "stub({ $method_name => $result, ... })" 4
.el .IP "stub({ \f(CW$method_name\fR => \f(CW$result\fR, ... })" 4
.IX Item "stub({ $method_name => $result, ... })"
.PD
Returns a new anonymous stub object. Takes a list of
\&\f(CW$method_name\fR/\f(CW$result\fR pairs or a reference to a hash containing the same.
Each \f(CW$method_name\fR listed is stubbed to return the associated value
(\f(CW$result\fR); or if the value is a subroutine reference, it is stubbed
in-place (the subroutine becomes the method).
.Sp
Examples:
.Sp
.Vb 3
\&  # A blank object with no methods.
\&  # Gives a true response to ref() and blessed().
\&  my $blank = stub();
\&
\&  # Static responses to width() and height():
\&  my $rect = stub(width => 5, height => 5);
\&
\&  # Dynamic response to area():
\&  my $radius = 1.0;
\&  my $circle_stub = stub(area => sub { PI * $radius * $radius });
.Ve
.Sp
You can also stub more methods, just like with any other object:
.Sp
.Vb 2
\&  my $rect = stub(width => 5, height => 5);
\&  $rect\->stubs(area => sub { my $self = shift; $self\->width * $self\->height });
.Ve
.ie n .IP "$thing\->stubs($method_name)" 4
.el .IP "\f(CW$thing\fR\->stubs($method_name)" 4
.IX Item "$thing->stubs($method_name)"
.PD 0
.ie n .IP "$thing\->stubs($method_name => $result)" 4
.el .IP "\f(CW$thing\fR\->stubs($method_name => \f(CW$result\fR)" 4
.IX Item "$thing->stubs($method_name => $result)"
.ie n .IP "$thing\->stubs($method_name => sub { $result })" 4
.el .IP "\f(CW$thing\fR\->stubs($method_name => sub { \f(CW$result\fR })" 4
.IX Item "$thing->stubs($method_name => sub { $result })"
.ie n .IP "$thing\->stubs({ $method_name => $result })" 4
.el .IP "\f(CW$thing\fR\->stubs({ \f(CW$method_name\fR => \f(CW$result\fR })" 4
.IX Item "$thing->stubs({ $method_name => $result })"
.PD
Stubs one or more methods on an existing class or instance, \f(CW$thing\fR.
.Sp
If passed only one (non-hash) argument, it is interpreted as a method name.
The return value of the stubbed method will be \f(CW\*(C`undef\*(C'\fR.
.Sp
Otherwise, the arguments are a list of \f(CW$method_name\fR and \f(CW$result\fR
pairs, either as a flat list or as a hash reference. Each method is
installed onto \f(CW$thing\fR, and returns the specified result. If the result is a
subroutine reference, it will be called for every invocation of the method.
.IP "\fImock()\fR" 4
.IX Item "mock()"
Returns a new blank, anonymous mock object, suitable for mocking methods with
\&\fIexpects()\fR.
.Sp
.Vb 2
\&  my $rect = mock();
\&  $rect\->expects(\*(Aqarea\*(Aq)\->returns(100);
.Ve
.ie n .IP "$thing\->expects($method)" 4
.el .IP "\f(CW$thing\fR\->expects($method)" 4
.IX Item "$thing->expects($method)"
Installs a mock method named \f(CW$method\fR onto the class or object \f(CW$thing\fR and
returns an Test::Spec::Mocks::Expectation object, which you can use to set the
return value with \f(CW\*(C`returns()\*(C'\fR and other expectations. By default, the method
is expected to be called at_least_once.
.Sp
If the expectation is not met before the enclosing example completes, the
mocked method will raise an exception that looks something like:
.Sp
.Vb 1
\&  expected foo to be called exactly 1 time, but it was called 0 times
.Ve
.SH "EXPECTATION ADJUSTMENT METHODS"
.IX Header "EXPECTATION ADJUSTMENT METHODS"
These are methods of the Test::Spec::Mocks::Expectation class, which you'll
receive by calling \f(CW\*(C`expects()\*(C'\fR on a class or object instance.
.ie n .IP "returns( $result )" 4
.el .IP "returns( \f(CW$result\fR )" 4
.IX Item "returns( $result )"
.PD 0
.ie n .IP "returns( @result )" 4
.el .IP "returns( \f(CW@result\fR )" 4
.IX Item "returns( @result )"
.IP "returns( \e&callback )" 4
.IX Item "returns( &callback )"
.PD
Configures the mocked method to return the specified result when called. If
passed a subroutine reference, the subroutine will be executed when the method
is called, and the result is the return value.
.Sp
.Vb 2
\&  $rect\->expects(\*(Aqheight\*(Aq)\->returns(5);
\&  # $rect\->height ==> 5
\&
\&  @points = ( [0,0], [1,0], [1,1], [1,0] );
\&  $rect\->expects(\*(Aqpoints\*(Aq)\->returns(@points);
\&  # (@p = $rect\->points) ==> ( [0,0], [1,0], [1,1], [1,0] )
\&  # ($p = $rect\->points) ==> 4
\&
\&  @points = ( [0,0], [1,0], [1,1], [1,0] );
\&  $rect\->expects(\*(Aqnext_point\*(Aq)\->returns(sub { shift @points });
\&  # $rect\->next_point ==> [0,0]
\&  # $rect\->next_point ==> [1,0]
\&  # ...
.Ve
.IP "exactly($N)" 4
.IX Item "exactly($N)"
Configures the mocked method so that it must be called exactly \f(CW$N\fR times.
.IP "never" 4
.IX Item "never"
Configures the mocked method so that it must never be called.
.IP "once" 4
.IX Item "once"
Configures the mocked method so that it must be called exactly one time.
.IP "at_least($N)" 4
.IX Item "at_least($N)"
Configures the mocked method so that it must be called at least \f(CW$N\fR times.
.IP "at_least_once" 4
.IX Item "at_least_once"
Configures the mocked method so that it must be called at least 1 time.
This is just syntactic sugar for \f(CWat_least(1)\fR.
.IP "at_most($N)" 4
.IX Item "at_most($N)"
Configures the mocked method so that it must be called no more than \f(CW$N\fR times.
.IP "at_most_once" 4
.IX Item "at_most_once"
Configures the mocked method so that it must be called either zero or 1
times.
.IP "maybe" 4
.IX Item "maybe"
An alias for \*(L"at_most_once\*(R".
.IP "any_number" 4
.IX Item "any_number"
Configures the mocked method so that it can be called zero or more times.
.IP "times" 4
.IX Item "times"
A syntactic sugar no-op:
.Sp
.Vb 1
\&  $io\->expects(\*(Aqprint\*(Aq)\->exactly(3)\->times;
.Ve
.Sp
\&\fIThis method is alpha and will probably change in a future release.\fR
.IP "with(@arguments) / with_eq(@arguments)" 4
.IX Item "with(@arguments) / with_eq(@arguments)"
Configures the mocked method so that it must be called with arguments as
specified. The arguments will be compared using the \*(L"eq\*(R" operator, so it works
for most scalar values with no problem. If you want to check objects here,
they must be the exact same instance or you must overload the \*(L"eq\*(R" operator to
provide the behavior you desire.
.IP "with_deep(@arguments)" 4
.IX Item "with_deep(@arguments)"
Similar to \f(CW\*(C`with_eq\*(C'\fR except the arguments are compared using Test::Deep: scalars are
compared by value, arrays and hashes must have the same elements and references
must be blessed into the same class.
.Sp
.Vb 2
\&    $cache\->expects(\*(Aqset\*(Aq)
\&          \->with_deep($customer_id, { name => $customer_name });
.Ve
.Sp
Use Test::Deep's comparison functions for more flexibility:
.Sp
.Vb 3
\&    use Test::Deep::NoTest ();
\&    $s3\->expects(\*(Aqput\*(Aq)
\&       \->with_deep(\*(Aqtest\-bucket\*(Aq, \*(Aqmy\-doc\*(Aq, Test::Deep::ignore());
.Ve
.IP "raises($exception)" 4
.IX Item "raises($exception)"
Configures the mocked method so that it raises \f(CW$exception\fR when called.
.SH "OTHER EXPECTATION METHODS"
.IX Header "OTHER EXPECTATION METHODS"
.IP "verify" 4
.IX Item "verify"
Allows you to verify manually that the expectation was met. If the expectation
has not been met, the method dies with an error message containing specifics
of the failure.  Returns true otherwise.
.IP "problems" 4
.IX Item "problems"
If the expectation has not been met, returns a list of problem description
strings. Otherwise, returns an empty list.
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
.IP "Memory leaks" 4
.IX Item "Memory leaks"
Because of the way the mock objects (\f(CW\*(C`stubs\*(C'\fR, \f(CW\*(C`stub\*(C'\fR, \f(CW\*(C`expects\*(C'\fR, and \f(CW\*(C`mock\*(C'\fR)
are integrated into the Test::Spec runtime they will leak memory. It is
not recommended to use the Test::Spec mocks in any long-running program.
.Sp
Patches welcome.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There are other less sugary mocking systems for Perl, including
Test::MockObject and Test::MockObject::Extends.
.PP
This module is a plugin for Test::Spec.  It is inspired by
Mocha <http://mocha.rubyforge.org/>.
.PP
The Wikipedia article Mock object <http://en.wikipedia.org/wiki/Mock_object>
is very informative.
.SH "AUTHOR"
.IX Header "AUTHOR"
Philip Garrett, <philip.garrett@icainformatics.com>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2011 by Informatics Corporation of America.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
