.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::Eksblowfish 3"
.TH Crypt::Eksblowfish 3 "2018-08-13" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Eksblowfish \- the Eksblowfish block cipher
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Crypt::Eksblowfish;
\&
\&        $block_size = Crypt::Eksblowfish\->blocksize;
\&
\&        $cipher = Crypt::Eksblowfish\->new(8, $salt, $key);
\&
\&        $block_size = $cipher\->blocksize;
\&        $ciphertext = $cipher\->encrypt($plaintext);
\&        $plaintext = $cipher\->decrypt($ciphertext);
\&
\&        $p_array = $cipher\->p_array;
\&        $s_boxes = $cipher\->s_boxes;
\&        if($cipher\->is_weak) { ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An object of this type encapsulates a keyed instance of the Eksblowfish
block cipher, ready to encrypt and decrypt.
.PP
Eksblowfish is a variant of the Blowfish cipher, modified to make
the key setup very expensive.  (\*(L"Eks\*(R" stands for \*(L"expensive key
schedule\*(R".)  This doesn't make it significantly cryptographically
stronger, but is intended to hinder brute-force attacks.  It also
makes it unsuitable for any application requiring key agility.  It was
designed by Niels Provos and David Mazieres for password hashing in
OpenBSD.  See Crypt::Eksblowfish::Bcrypt for the hash algorithm.
See Crypt::Eksblowfish::Blowfish for the unmodified Blowfish cipher.
.PP
Eksblowfish is a parameterised (family-keyed) cipher.  It takes a cost
parameter that controls how expensive the key scheduling is.  It also
takes a family key, known as the \*(L"salt\*(R".  Cost and salt parameters
together define a cipher family.  Within each family, a key determines an
encryption function in the usual way.  See Crypt::Eksblowfish::Family
for a way to encapsulate an Eksblowfish cipher family.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "Crypt::Eksblowfish\->blocksize" 4
.IX Item "Crypt::Eksblowfish->blocksize"
Returns 8, indicating the Eksblowfish block size of 8 octets.  This method
may be called on either the class or an instance.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "Crypt::Eksblowfish\->new(\s-1COST, SALT, KEY\s0)" 4
.IX Item "Crypt::Eksblowfish->new(COST, SALT, KEY)"
Performs key setup on a new instance of the Eksblowfish algorithm,
returning the keyed state.  The \s-1KEY\s0 may be any length from 1 octet to
72 octets inclusive.  The \s-1SALT\s0 is a family key, and must be exactly
16 octets.  \s-1COST\s0 is an integer parameter controlling the expense of
keying: the number of operations in key setup is proportional to 2^COST.
All three parameters influence all the subkeys; changing any of them
produces a different encryption function.
.Sp
Due to the mandatory family-keying parameters (\s-1COST\s0 and \s-1SALT\s0), this
constructor does not match the interface expected by \f(CW\*(C`Crypt::CBC\*(C'\fR
and similar crypto plumbing modules.  To
use Eksblowfish with them it is necessary to have an object that
encapsulates a cipher family and provides a constructor that takes only a
key argument.  That facility is supplied by \f(CW\*(C`Crypt::Eksblowfish::Family\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$cipher\->blocksize" 4
.el .IP "\f(CW$cipher\fR\->blocksize" 4
.IX Item "$cipher->blocksize"
Returns 8, indicating the Eksblowfish block size of 8 octets.  This method
may be called on either the class or an instance.
.ie n .IP "$cipher\->encrypt(\s-1PLAINTEXT\s0)" 4
.el .IP "\f(CW$cipher\fR\->encrypt(\s-1PLAINTEXT\s0)" 4
.IX Item "$cipher->encrypt(PLAINTEXT)"
\&\s-1PLAINTEXT\s0 must be exactly eight octets.  The block is encrypted, and
the ciphertext is returned.
.ie n .IP "$cipher\->decrypt(\s-1CIPHERTEXT\s0)" 4
.el .IP "\f(CW$cipher\fR\->decrypt(\s-1CIPHERTEXT\s0)" 4
.IX Item "$cipher->decrypt(CIPHERTEXT)"
\&\s-1CIPHERTEXT\s0 must be exactly eight octets.  The block is decrypted, and
the plaintext is returned.
.ie n .IP "$cipher\->p_array" 4
.el .IP "\f(CW$cipher\fR\->p_array" 4
.IX Item "$cipher->p_array"
.PD 0
.ie n .IP "$cipher\->s_boxes" 4
.el .IP "\f(CW$cipher\fR\->s_boxes" 4
.IX Item "$cipher->s_boxes"
.PD
These methods extract the subkeys from the keyed cipher.
This is not required in ordinary operation.  See the superclass
Crypt::Eksblowfish::Subkeyed for details.
.ie n .IP "$cipher\->is_weak" 4
.el .IP "\f(CW$cipher\fR\->is_weak" 4
.IX Item "$cipher->is_weak"
This method checks whether the cipher has been keyed with a weak key.
It may be desired to avoid using weak keys.  See the superclass
Crypt::Eksblowfish::Subkeyed for details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Crypt::Eksblowfish::Bcrypt,
Crypt::Eksblowfish::Blowfish,
Crypt::Eksblowfish::Family,
Crypt::Eksblowfish::Subkeyed,
<http://www.usenix.org/events/usenix99/provos/provos_html/node4.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Eksblowfish guts originally by Solar Designer (solar at openwall.com).
.PP
Modifications and Perl interface by Andrew Main (Zefram)
<zefram@fysh.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011
Andrew Main (Zefram) <zefram@fysh.org>
.PP
The original Eksblowfish code (in the form of \fIcrypt()\fR) from which
this module is derived is in the public domain.  It may be found at
<http://www.openwall.com/crypt/>.
.SH "LICENSE"
.IX Header "LICENSE"
This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
