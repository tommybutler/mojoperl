.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mojo::Redis::PubSub 3"
.TH Mojo::Redis::PubSub 3 "2019-05-07" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Redis::PubSub \- Publish and subscribe to Redis messages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Redis;
\&
\&  my $redis  = Mojo::Redis\->new;
\&  my $pubsub = $redis\->pubsub;
\&
\&  $pubsub\->listen("user:superwoman:messages" => sub {
\&    my ($pubsub, $message) = @_;
\&    say "superwoman got a message: $message";
\&  });
\&
\&  $pubsub\->notify("user:batboy:messages", "How are you doing?");
.Ve
.PP
See <https://github.com/jhthorsen/mojo\-redis/blob/master/examples/chat.pl>
for example Mojolicious application.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Redis::PubSub is an implementation of the Redis Publish/Subscribe
messaging paradigm. This class has the same \s-1API\s0 as Mojo::Pg::PubSub, so
you can easily switch between the backends.
.PP
This object holds one connection for receiving messages, and one connection
for sending messages. They are created lazily the first time \*(L"listen\*(R" or
\&\*(L"notify\*(R" is called. These connections does not affect the connection pool
for Mojo::Redis.
.PP
See pubsub <https://redis.io/topics/pubsub> for more details.
.SH "EVENTS"
.IX Header "EVENTS"
.SS "before_connect"
.IX Subsection "before_connect"
.Vb 1
\&  $pubsub\->on(before_connect => sub { my ($pubsub, $conn) = @_; ... });
.Ve
.PP
Emitted before \*(L"connection\*(R" is connected to the redis server. This can be
useful if you want to gather the \s-1CLIENT ID\s0 <https://redis.io/commands/client-id>
or run other commands before it goes into subscribe mode.
.SS "disconnect"
.IX Subsection "disconnect"
.Vb 1
\&  $pubsub\->on(disconnect => sub { my ($pubsub, $conn) = @_; ... });
.Ve
.PP
Emitted after \*(L"connection\*(R" is disconnected from the redis server.
.SS "reconnect"
.IX Subsection "reconnect"
.Vb 1
\&  $pubsub\->on(reconnect => sub { my ($pubsub, $conn) = @_; ... });
.Ve
.PP
Emitted after switching the \*(L"connection\*(R" with a new connection. This event
will only happen if \*(L"reconnect_interval\*(R" is 0 or more.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "db"
.IX Subsection "db"
.Vb 1
\&  $db = $pubsub\->db;
.Ve
.PP
Holds a Mojo::Redis::Database object that will be used to publish messages
or run other commands that cannot be run by the \*(L"connection\*(R".
.SS "connection"
.IX Subsection "connection"
.Vb 1
\&  $conn = $pubsub\->connection;
.Ve
.PP
Holds a Mojo::Redis::Connection object that will be used to subscribe to
channels.
.SS "reconnect_interval"
.IX Subsection "reconnect_interval"
.Vb 4
\&  $interval = $pubsub\->reconnect_interval;
\&  $pubsub   = $pubsub\->reconnect_interval(1);
\&  $pubsub   = $pubsub\->reconnect_interval(0.1);
\&  $pubsub   = $pubsub\->reconnect_interval(\-1);
.Ve
.PP
The amount of time in seconds to wait to \*(L"reconnect\*(R" after disconnecting.
Default is 1 (second). \*(L"reconnect\*(R" can be disabled by setting this to a
negative value.
.SS "redis"
.IX Subsection "redis"
.Vb 2
\&  $conn   = $pubsub\->connection;
\&  $pubsub = $pubsub\->connection(Mojo::Redis\->new);
.Ve
.PP
Holds a Mojo::Redis object used to create the connections to talk with Redis.
.SH "METHODS"
.IX Header "METHODS"
.SS "channels_p"
.IX Subsection "channels_p"
.Vb 2
\&  $promise = $pubsub\->channels_p\->then(sub { my $channels = shift });
\&  $promise = $pubsub\->channels_p("pat*")\->then(sub { my $channels = shift });
.Ve
.PP
Lists the currently active channels. An active channel is a Pub/Sub channel
with one or more subscribers (not including clients subscribed to patterns).
.SS "json"
.IX Subsection "json"
.Vb 1
\&  $pubsub = $pubsub\->json("foo");
.Ve
.PP
Activate automatic \s-1JSON\s0 encoding and decoding with \*(L"to_json\*(R" in Mojo::JSON and
\&\*(L"from_json\*(R" in Mojo::JSON for a channel.
.PP
.Vb 6
\&  # Send and receive data structures
\&  $pubsub\->json("foo")\->listen(foo => sub {
\&    my ($pubsub, $payload) = @_;
\&    say $payload\->{bar};
\&  });
\&  $pubsub\->notify(foo => {bar => \*(AqI â™¥ Mojolicious!\*(Aq});
.Ve
.SS "keyspace_listen"
.IX Subsection "keyspace_listen"
.Vb 2
\&  $cb = $pubsub\->keyspace_listen($key, $op, sub { my ($pubsub, $message) = @_ }) });
\&  $cb = $pubsub\->keyspace_listen($key, $op, \e%args, sub { my ($pubsub, $message) = @_ }) });
.Ve
.PP
Used to listen for keyspace notifications. See <https://redis.io/topics/notifications>
for more details.
.PP
\&\f(CW$key\fR \f(CW$op\fR and \f(CW%args\fR are optional. \f(CW$key\fR and \f(CW$op\fR will default to
\&\*(L"*\*(R" and \f(CW%args\fR can have the following key values:
.PP
The channel that will be subscribed to will look like one of these:
.PP
.Vb 2
\&  _\|_keyspace@${db}_\|_:$key $op
\&  _\|_keyevent@${db}_\|_:$op $key
.Ve
.IP "\(bu" 2
db
.Sp
Default database to listen for events is the database set in
\&\*(L"url\*(R" in Mojo::Redis. \*(L"*\*(R" is also a valid value, meaning listen for events
happening in all databases.
.IP "\(bu" 2
key
.Sp
Alternative to passing in \f(CW$key\fR. Default value is \*(L"*\*(R".
.IP "\(bu" 2
op
.Sp
Alternative to passing in \f(CW$op\fR. Default value is \*(L"*\*(R".
.IP "\(bu" 2
type
.Sp
Will default to \*(L"keyevent\*(R" if \f(CW$key\fR is \*(L"*\*(R", and \*(L"keyspace\*(R" if not. It can
also be set to \*(L"key*\*(R" for listening to both \*(L"keyevent\*(R" and \*(L"keyspace\*(R" events.
.SS "keyspace_unlisten"
.IX Subsection "keyspace_unlisten"
.Vb 2
\&  $pubsub = $pubsub\->keyspace_unlisten(@args);
\&  $pubsub = $pubsub\->keyspace_unlisten(@args, $cb);
.Ve
.PP
Stop listening for keyspace events. See \*(L"keyspace_listen\*(R" for details about
keyspace events and what \f(CW@args\fR can be.
.SS "listen"
.IX Subsection "listen"
.Vb 1
\&  $cb = $pubsub\->listen($channel => sub { my ($pubsub, $message) = @_ });
.Ve
.PP
Subscribe to a channel, there is no limit on how many subscribers a channel
can have. The returning code ref can be passed on to \*(L"unlisten\*(R".
.SS "notify"
.IX Subsection "notify"
.Vb 1
\&  $pubsub\->notify($channel => $message);
.Ve
.PP
Send a plain string message to a channel.
.SS "numpat_p"
.IX Subsection "numpat_p"
.Vb 1
\&  $promise = $pubsub\->channels_p\->then(sub { my $int = shift });
.Ve
.PP
Returns the number of subscriptions to patterns (that are performed using the
\&\s-1PSUBSCRIBE\s0 command). Note that this is not just the count of clients
subscribed to patterns but the total number of patterns all the clients are
subscribed to.
.SS "numsub_p"
.IX Subsection "numsub_p"
.Vb 1
\&  $promise = $pubsub\->numsub_p(@channels)\->then(sub { my $channels = shift });
.Ve
.PP
Returns the number of subscribers (not counting clients subscribed to
patterns) for the specified channels as a hash-ref, where the keys are
channel names.
.SS "unlisten"
.IX Subsection "unlisten"
.Vb 2
\&  $pubsub = $pubsub\->unlisten($channel);
\&  $pubsub = $pubsub\->unlisten($channel, $cb);
.Ve
.PP
Unsubscribe from a channel.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Redis.
