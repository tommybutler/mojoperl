.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Pod::Wordlist 3"
.TH Pod::Wordlist 3 "2016-04-22" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Wordlist \- English words that come up in Perl documentation
.SH "VERSION"
.IX Header "VERSION"
version 1.20
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Pod::Wordlist is used by Pod::Spell, providing a set of words
that are English jargon words that come up in Perl documentation, but which are
not to be found in general English lexicons.  (For example: autovivify,
backreference, chroot, stringify, wantarray.)
.PP
You can also use this wordlist with your word processor by just
pasting \f(CW\*(C`share/wordlist\*(C'\fR's content into your wordprocessor, deleting
the leading Perl code so that only the wordlist remains, and then
spellchecking this resulting list and adding every word in it to your
private lexicon.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "wordlist"
.IX Subsection "wordlist"
.Vb 1
\&        ref $self\->wordlist eq \*(AqHASH\*(Aq; # true
.Ve
.PP
This is the instance of the wordlist
.SS "no_wide_chars"
.IX Subsection "no_wide_chars"
If true, words with characters outside the Latin\-1 range \f(CW0x00\fR to \f(CW0xFF\fR will
be stripped like stopwords.
.SH "METHODS"
.IX Header "METHODS"
.SS "learn_stopwords"
.IX Subsection "learn_stopwords"
.Vb 1
\&    $wordlist\->learn_stopwords( $text );
.Ve
.PP
Modifies the stopword list based on a text block. See the rules
for <adding stopwords|Pod::Spell/ADDING \s-1STOPWORDS\s0> for details.
.SS "is_stopword"
.IX Subsection "is_stopword"
.Vb 1
\&        if ( $wordlist\->is_stopword( $word ) ) { ... }
.Ve
.PP
Returns true if the word is found in the stopword list.
.SS "strip_stopwords"
.IX Subsection "strip_stopwords"
.Vb 1
\&    my $out = $wordlist\->strip_stopwords( $text );
.Ve
.PP
Returns a string with space separated words from the original
text with stopwords removed.
.SH "WORDLIST"
.IX Header "WORDLIST"
Note that the scope of this file is only English, specifically American
English.  (But you may find in useful to incorporate into your own
lexicons, even if they are for other dialects/languages.)
.PP
remove any q{'s} before adding to the list.
.PP
The list should be sorted and uniqued. The following will work (with \s-1GNU\s0
Coreutils ).
.PP
.Vb 1
\&        sort share/wordlist \-u > /tmp/sorted && mv /tmp/sorted share/wordlist
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Sean M. Burke <sburke@cpan.org>
.IP "\(bu" 4
Caleb Cushing <xenoterracide@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by Olivier Mengu√©.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
