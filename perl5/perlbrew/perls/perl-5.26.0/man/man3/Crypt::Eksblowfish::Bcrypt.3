.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::Eksblowfish::Bcrypt 3"
.TH Crypt::Eksblowfish::Bcrypt 3 "2018-08-13" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Eksblowfish::Bcrypt \- Blowfish\-based Unix crypt() password hash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Crypt::Eksblowfish::Bcrypt qw(bcrypt_hash);
\&
\&        $hash = bcrypt_hash({
\&                        key_nul => 1,
\&                        cost => 8,
\&                        salt => $salt,
\&                }, $password);
\&
\&        use Crypt::Eksblowfish::Bcrypt qw(en_base64 de_base64);
\&
\&        $text = en_base64($octets);
\&        $octets = de_base64($text);
\&
\&        use Crypt::Eksblowfish::Bcrypt qw(bcrypt);
\&
\&        $hashed_password = bcrypt($password, $settings);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the Blowfish-based Unix \fIcrypt()\fR password hashing
algorithm, known as \*(L"bcrypt\*(R".  This hash uses a variant of Blowfish,
known as \*(L"Eksblowfish\*(R", modified to have particularly expensive key
scheduling.  Eksblowfish and bcrypt were devised by Niels Provos and
David Mazieres for OpenBSD.  The design is described in a paper at
<http://www.usenix.org/events/usenix99/provos.html>.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "bcrypt_hash(\s-1SETTINGS, PASSWORD\s0)" 4
.IX Item "bcrypt_hash(SETTINGS, PASSWORD)"
Hashes \s-1PASSWORD\s0 according to the supplied \s-1SETTINGS,\s0 and returns the
23\-octet hash.  \s-1SETTINGS\s0 must be a reference to a hash, with these keys:
.RS 4
.IP "\fBkey_nul\fR" 4
.IX Item "key_nul"
Truth value: whether to append a \s-1NUL\s0 to the password before using it as a key.
The algorithm as originally devised does not do this, but it was later
modified to do it.  The version that does append \s-1NUL\s0 is to be preferred;
not doing so is supported only for backward compatibility.
.IP "\fBcost\fR" 4
.IX Item "cost"
Non-negative integer controlling the cost of the hash function.
The number of operations is proportional to 2^cost.
.IP "\fBsalt\fR" 4
.IX Item "salt"
Exactly sixteen octets of salt.
.RE
.RS 4
.RE
.IP "en_base64(\s-1BYTES\s0)" 4
.IX Item "en_base64(BYTES)"
Encodes the octet string textually using the form of base 64 that is
conventionally used with bcrypt.
.IP "de_base64(\s-1TEXT\s0)" 4
.IX Item "de_base64(TEXT)"
Decodes an octet string that was textually encoded using the form of
base 64 that is conventionally used with bcrypt.
.IP "bcrypt(\s-1PASSWORD, SETTINGS\s0)" 4
.IX Item "bcrypt(PASSWORD, SETTINGS)"
This is a version of \f(CW\*(C`crypt\*(C'\fR (see \*(L"crypt\*(R" in perlfunc) that implements the
bcrypt algorithm.  It does not implement any other hashing algorithms,
so if others are desired then it necessary to examine the algorithm
prefix in \s-1SETTINGS\s0 and dispatch between more than one version of \f(CW\*(C`crypt\*(C'\fR.
.Sp
\&\s-1SETTINGS\s0 must be a string which encodes the algorithm parameters,
including salt.  It must begin with \*(L"$2\*(R", optional \*(L"a\*(R", \*(L"$\*(R", two
digits, \*(L"$\*(R", and 22 base 64 digits.  The rest of the string is ignored.
The presence of the optional \*(L"a\*(R" means that a \s-1NUL\s0 is to be appended
to the password before it is used as a key.  The two digits set the
cost parameter.  The 22 base 64 digits encode the salt.  The function
will \f(CW\*(C`die\*(C'\fR if \s-1SETTINGS\s0 does not have this format.
.Sp
The \s-1PASSWORD\s0 is hashed according to the \s-1SETTINGS.\s0  The value returned
is a string which encodes the algorithm parameters and the hash: the
parameters are in the same format required in \s-1SETTINGS,\s0 and the hash is
appended in the form of 31 base 64 digits.  This result is suitable to
be used as a \s-1SETTINGS\s0 string for input to this function: the hash part
of the string is ignored on input.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Crypt::Eksblowfish,
<http://www.usenix.org/events/usenix99/provos.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Main (Zefram) <zefram@fysh.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011
Andrew Main (Zefram) <zefram@fysh.org>
.SH "LICENSE"
.IX Header "LICENSE"
This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
