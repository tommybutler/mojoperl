.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::cpm::Tutorial 3"
.TH App::cpm::Tutorial 3 "2022-04-26" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::cpm::Tutorial \- How to use cpm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $ cpm install Module
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
cpm is yet another \s-1CPAN\s0 client (like cpan, cpanp, and cpanm),
which is fast!
.SS "How to install cpm"
.IX Subsection "How to install cpm"
From \s-1CPAN:\s0
.PP
.Vb 1
\&  $ curl \-fsSL https://raw.githubusercontent.com/skaji/cpm/main/cpm | perl \- install \-g App::cpm
.Ve
.PP
Or, download a \fIself-contained\fR cpm:
.PP
.Vb 3
\&  $ curl \-fsSL https://raw.githubusercontent.com/skaji/cpm/main/cpm > cpm
\&  $ chmod +x cpm
\&  $ ./cpm \-\-version
.Ve
.SS "First step"
.IX Subsection "First step"
.Vb 1
\&  $ cpm install Plack
.Ve
.PP
This command installs Plack into \f(CW\*(C`./local\*(C'\fR, and you can use it by
.PP
.Vb 1
\&  $ perl \-I$PWD/local/lib/perl5 \-MPlack \-E \*(Aqsay Plack\->VERSION\*(Aq
.Ve
.PP
If you want to install modules into current \s-1INC\s0 instead of \f(CW\*(C`./local\*(C'\fR,
then use \f(CW\*(C`\-\-global/\-g\*(C'\fR option.
.PP
.Vb 1
\&  $ cpm install \-\-global Plack
.Ve
.PP
By default, cpm outputs only \f(CW\*(C`DONE install Module\*(C'\fR things.
If you want more verbose messages, use \f(CW\*(C`\-\-verbose/\-v\*(C'\fR option.
.PP
.Vb 1
\&  $ cpm install \-\-verbose Plack
.Ve
.SS "Second step"
.IX Subsection "Second step"
cpm can handle version range notation like cpanm. Let's see some examples.
.PP
.Vb 3
\&  $ cpm install Plack~\*(Aq> 1.000, <= 2.000\*(Aq
\&  $ cpm install Plack~\*(Aq== 1.0030\*(Aq
\&  $ cpm install Plack@1.0030  # this is an alias of ~\*(Aq== 1.0030\*(Aq
.Ve
.PP
cpm can install dev releases (\s-1TRIAL\s0 releases).
.PP
.Vb 1
\&  $ cpm install Moose@dev
\&
\&  # if you prefer dev releases for not only Moose,
\&  # but also its dependencies, then use global \-\-dev option
\&  $ cpm install \-\-dev Moose
.Ve
.PP
And cpm can install modules from git repositories directly.
.PP
.Vb 1
\&  $ cpm install https://github.com/skaji/Carl.git
.Ve
.SS "cpanfile and dist/url/mirror/git syntax"
.IX Subsection "cpanfile and dist/url/mirror/git syntax"
If you omit arguments, and there exists \f(CW\*(C`cpanfile\*(C'\fR in the current directory,
then cpm loads modules from cpanfile, and install them
.PP
.Vb 4
\&  $ cat cpanfile
\&  requires \*(AqMoose\*(Aq, \*(Aq2.000\*(Aq;
\&  requires \*(AqPlack\*(Aq, \*(Aq> 1.000, <= 2.000\*(Aq;
\&  $ cpm install
.Ve
.PP
If you have \f(CW\*(C`cpanfile.snapshot\*(C'\fR,
then cpm tries to resolve distribution names from it
.PP
.Vb 3
\&  $ cpm install \-v
\&  30186 DONE resolve (0.001sec) Plack \-> Plack\-1.0030 (from Snapshot)
\&  ...
.Ve
.PP
cpm supports dist/url/mirror syntax in cpanfile just like cpanminus:
.PP
.Vb 2
\&  requires \*(AqPath::Class\*(Aq, 0.26,
\&    dist => "KWILLIAMS/Path\-Class\-0.26.tar.gz";
\&
\&  # use dist + mirror
\&  requires \*(AqCookie::Baker\*(Aq,
\&    dist => "KAZEBURO/Cookie\-Baker\-0.08.tar.gz",
\&    mirror => "http://cpan.cpantesters.org/";
\&
\&  # use the full URL
\&  requires \*(AqTry::Tiny\*(Aq, 0.28,
\&    url => "http://backpan.perl.org/authors/id/E/ET/ETHER/Try\-Tiny\-0.28.tar.gz";
.Ve
.PP
cpm also supports git syntax in cpanfile:
.PP
.Vb 5
\&  requires \*(AqCarl\*(Aq, git => \*(Aqhttps://github.com/skaji/Carl.git\*(Aq;
\&  requires \*(AqApp::cpm\*(Aq, git => \*(Aqhttps://login:password@github.com/skaji/cpm.git\*(Aq;
\&  requires \*(AqPerl::PrereqDistributionGatherer\*(Aq,
\&    git => \*(Aqhttps://github.com/skaji/Perl\-PrereqDistributionGatherer\*(Aq,
\&    ref => \*(Aq3850305\*(Aq; # ref can be revision/branch/tag
.Ve
.PP
Please note that to support git syntax in cpanfile wholly,
there are several TODOs.
.SS "Darkpan integration"
.IX Subsection "Darkpan integration"
There are \s-1CPAN\s0 modules that create \fIdarkpans\fR
(minicpan, \s-1CPAN\s0 mirror) such as CPAN::Mini, OrePAN2, Pinto.
.PP
Such darkpans store distribution tarballs in
.PP
.Vb 1
\&  DARKPAN/authors/id/A/AU/AUTHOR/Module\-0.01.tar.gz
.Ve
.PP
and create the \fIde facto standard\fR index file \f(CW\*(C`02packages.details.txt.gz\*(C'\fR in
.PP
.Vb 1
\&  DARKPAN/modules/02packages.details.txt.gz
.Ve
.PP
If you want to use cpm against such darkpans,
change the cpm resolver by \f(CW\*(C`\-\-resolver/\-r\*(C'\fR option:
.PP
.Vb 2
\&  $ cpm install \-\-resolver 02packages,http://example.com/darkpan Module
\&  $ cpm install \-\-resolver 02packages,file::///path/to/darkpan   Module
.Ve
.PP
Sometimes, your darkpan is not whole \s-1CPAN\s0 mirror, but partial,
so some modules are missing in it.
Then append \f(CW\*(C`\-\-resolver metadb\*(C'\fR option to fall back to normal MetaDB resolver:
.PP
.Vb 4
\&  $ cpm install \e
\&     \-\-resolver 02packages,http://example.com/darkpan \e
\&     \-\-resolver metadb \e
\&     Module
.Ve
.PP
If you host your own darkmetadb for your own darkpan, you can use it too.
Then append \f(CW\*(C`\-\-resolver metadb\*(C'\fR option to fall back to normal MetaDB resolver:
.PP
.Vb 4
\&  $ cpm install \e
\&     \-\-resolver metadb,http://example.com/darkmetadb,http://example.com/darkpan \e
\&     \-\-resolver metadb \e
\&     Module
.Ve
