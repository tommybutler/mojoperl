.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mojo::Redis::Cursor 3"
.TH Mojo::Redis::Cursor 3 "2019-01-31" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Redis::Cursor \- Iterate the results from SCAN, SSCAN, HSCAN and ZSCAN
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Mojo::Redis;
\&  my $redis  = Mojo::Redis\->new;
\&  my $cursor = $redis\->cursor(hkeys => \*(Aqredis:scan_test:hash\*(Aq);
\&  my $keys   = $cursor\->all;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Redis::Cursor provides methods for iterating over the result from
the Redis commands \s-1SCAN, SSCAN, HSCAN\s0 and \s-1ZSCAN.\s0
.PP
See <https://redis.io/commands/scan> for more information.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "command"
.IX Subsection "command"
.Vb 1
\&  $array_ref = $cursor\->command;
.Ve
.PP
The current command used to get data from Redis. This need to be set in the
constructor, but reading it out might not reflect the value put in. Examples:
.PP
.Vb 2
\&  $r\->new(command => [hgetall => "foo*"]);
\&  # $r\->command == [hscan => "foo*", 0]
\&
\&  $r\->new(command => [SSCAN => "foo*"])
\&  # $r\->command == [SSCAN => "foo*", 0]
.Ve
.PP
Also, calling \*(L"next\*(R" will change the value of \*(L"command\*(R". Example:
.PP
.Vb 4
\&  $r\->new(command => ["keys"]);
\&  # $r\->command == [scan => 0]
\&  $r\->next;
\&  # $r\->command == [scan => 42]
.Ve
.SS "connection"
.IX Subsection "connection"
.Vb 2
\&  $conn   = $cursor\->connection;
\&  $cursor = $cursor\->connection(Mojo::Redis::Connection\->new);
.Ve
.PP
Holds a Mojo::Redis::Connection object.
.SS "finished"
.IX Subsection "finished"
.Vb 1
\&  $bool = $cursor\->finished;
.Ve
.PP
True after calling \*(L"all\*(R" or if \*(L"next\*(R" has iterated the whole list of members.
.SS "redis"
.IX Subsection "redis"
.Vb 2
\&  $conn   = $cursor\->connection;
\&  $cursor = $cursor\->connection(Mojo::Redis::Connection\->new);
.Ve
.PP
Holds a Mojo::Redis object used to create the connections to talk with Redis.
.SH "METHODS"
.IX Header "METHODS"
.SS "again"
.IX Subsection "again"
.Vb 1
\&  $cursor\->again;
.Ve
.PP
Used to reset the cursor and make \*(L"next\*(R" start over.
.SS "all"
.IX Subsection "all"
.Vb 2
\&  $res    = $cursor\->all;
\&  $cursor = $cursor\->all(sub { my ($cursor, $res) = @_ });
.Ve
.PP
Used to return all members. \f(CW$res\fR is an array ref of strings, except when
using the command \*(L"hgetall\*(R".
.SS "all_p"
.IX Subsection "all_p"
.Vb 1
\&  $promise = $cursor\->all_p\->then(sub { my $res = shift });
.Ve
.PP
Same as \*(L"all\*(R" but returns a Mojo::Promise.
.SS "new"
.IX Subsection "new"
.Vb 1
\&  $cursor = Mojo::Redis::Cursor\->new(command => [...], redis => Mojo::Redis\->new);
.Ve
.PP
Used to construct a new object. \*(L"command\*(R" and \*(L"redis\*(R" is required as input.
.PP
Here are some examples of the differnet commands that are supported:
.PP
.Vb 5
\&  # Custom cursor commands
\&  $cursor = $cursor\->cursor(hscan => 0, match => \*(Aq*\*(Aq, count => 100);
\&  $cursor = $cursor\->cursor(scan  => 0, match => \*(Aq*\*(Aq, count => 100);
\&  $cursor = $cursor\->cursor(sscan => 0, match => \*(Aq*\*(Aq, count => 100);
\&  $cursor = $cursor\->cursor(zscan => 0, match => \*(Aq*\*(Aq, count => 100);
\&
\&  # Convenient cursor commands
\&  $cursor = $cursor\->cursor(hgetall  => "some:hash:key");
\&  $cursor = $cursor\->cursor(hkeys    => "some:hash:key");
\&  $cursor = $cursor\->cursor(keys     => "some:key:pattern*");
\&  $cursor = $cursor\->cursor(smembers => "some:set:key");
.Ve
.PP
The convenient commands are alternatives to \*(L"hgetall\*(R" in Mojo::Redis::Database,
\&\*(L"hkeys\*(R" in Mojo::Redis::Database, \*(L"keys\*(R" in Mojo::Redis::Database and
\&\*(L"smembers\*(R" in Mojo::Redis::Database.
.SS "next"
.IX Subsection "next"
.Vb 2
\&  $res    = $cursor\->next;
\&  $cursor = $cursor\->next(sub { my ($cursor, $err, $res) = @_ });
.Ve
.PP
Used to return a chunk of members. \f(CW$res\fR is an array ref of strings, except
when using the command \*(L"hgetall\*(R". \f(CW$res\fR will also be \f(CW\*(C`undef()\*(C'\fR when the
cursor is exhausted and \*(L"finished\*(R" will be true.
.SS "next_p"
.IX Subsection "next_p"
.Vb 1
\&  $promise = $cursor\->next_p;
.Ve
.PP
Same as \*(L"next\*(R" but returns a Mojo::Prmoise.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Redis.
