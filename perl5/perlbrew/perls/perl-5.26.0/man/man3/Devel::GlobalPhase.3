.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Devel::GlobalPhase 3"
.TH Devel::GlobalPhase 3 "2018-01-27" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::GlobalPhase \- Detect perl's global phase on older perls.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Devel::GlobalPhase;
\&    print global_phase; # RUN
\&
\&    use Devel::GlobalPhase \-var;
\&    print ${^GLOBAL_PHASE}; # RUN
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This gives access to ${^GLOBAL_PHASE}
in versions of perl that don't provide it. The built in variable will be
used if it is available.
.PP
If all that is needed is detecting global destruction,
Devel::GlobalDestruction should be used instead of this module.
.SH "EXPORTS"
.IX Header "EXPORTS"
.SS "global_phase"
.IX Subsection "global_phase"
Returns the global phase either from \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR or by calculating it.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "\-var"
.IX Subsection "-var"
If this option is specified on import, the global variable
\&\f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR will be created if it doesn't exist, emulating the
built in variable from newer perls.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
There are tricks that can be played with B or \s-1XS\s0 that would fool this
module for the \s-1INIT\s0 and \s-1END\s0 phase.
.IP "\(bu" 4
During an \f(CW\*(C`END {}\*(C'\fR block created at runtime after this module is loaded, the
phase may be reported as \f(CW\*(C`RUN\*(C'\fR.  While this could be made more accurate, it
would slow down the module significantly during the \s-1RUN\s0 phase, and has the
potential to segfault perl.
.SH "AUTHOR"
.IX Header "AUTHOR"
haarg \- Graham Knop (cpan:HAARG) <haarg@haarg.org>
.SS "\s-1CONTRIBUTORS\s0"
.IX Subsection "CONTRIBUTORS"
Uses some code taken from Devel::GlobalDestruction.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013 the Devel::GlobalPhase \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
