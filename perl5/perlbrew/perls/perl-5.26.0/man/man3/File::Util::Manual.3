.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Util::Manual 3"
.TH File::Util::Manual 3 "2017-08-04" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Util::Manual \- File::Util Reference
.SH "VERSION"
.IX Header "VERSION"
version 4.161950
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
This manual is is the complete reference to all available public methods for use
in File::Util.  It also touches on a few other topics as set forth below.
.PP
For a \*(L"nutshell\*(R"\-type reference full of actual small example code snippets, take
a look at the File::Util::Manual::Examples
.PP
For examples of full Programs using File::Util, take a look at the
File::Util::Cookbook.
.SS "The layout of the Manual"
.IX Subsection "The layout of the Manual"
Now we'll start out with some brief notes about what File::Util is (and isn't),
then we'll talk about the syntax used in File::Util.  After that we discuss
custom error handling and diagnostics in File::Util.  Finally, the rest of this
document will cover File::Util's object methods, one by one, with brief usage
examples.
.SS "What File::Util Is"
.IX Subsection "What File::Util Is"
File::Util is a \*(L"Pure Perl\*(R" library that provides you with several easy-to-use
tools to wrangle files and directories.  It has higher order methods
(that's fancy talk for saying that you can feed subroutine references to some
of File::Util's object methods and they will be treated like \*(L"callbacks\*(R").
.PP
File::Util is mainly Object-Oriented Perl, but strives to be gentle and
accommodating to those who do not know about or who do not like \*(L"\s-1OO\*(R"\s0 interfaces.
As such, many of the object methods available in File::Util can also be
imported into your namespace and \fIused like regular subroutines\fR to make
short work of simple tasks.
.PP
For more advanced tasks and features, you will need to use File::Util's
object-oriented interface.  Don't worry, it's easy, and there are plenty of
examples here in the documentation to get you off to a great and productive
start.  If you run into trouble, help is available.
.PP
File::Util tries its best to adhere to these guiding principles:
.IP "\fBBe easy\fR" 4
.IX Item "Be easy"
Make hard things easier and safer to do while avoiding common mistakes
associated with file handling in Perl.  Code using File::Util will
automatically be abiding by best practices with regard to Perl \s-1IO.\s0
.Sp
File::Util makes the right decisions for you with regard to all the little
details involved in the vast majority of file-related tasks.  File locking
is automatically performed for you!  File handles are always lexically
scoped.  Safe reads and writes are performed with hard limits on the amount
of \s-1RAM\s0 you are allowed to consume in your process per file read.  (You can
adjust the limits.)
.IP "\fBBe portable\fR" 4
.IX Item "Be portable"
We make sure that File::Util is going to work on your computer or virtual
machine.  If you run Windows, Mac, Linux, \s-1BSD,\s0 some flavor of Unix, etc...
File::Util should work right out of the box.  There are currently no platforms
where Perl runs that we do not support.  If Perl can run on it, File::Util
can run on it.  If you want unicode support, however, you need to at least
be running Perl 5.8 or better.
.IP "\fBBe compatible\fR" 4
.IX Item "Be compatible"
File::Util has been around for a long time, and so has Perl.  We'd like to
think that this is because they are good things!  This means there is a lot
of backward-compatibility to account for, even within File::Util itself.
.Sp
In the last several years, there has never been a release of File::Util that
intentionally broke code running a previous version.  We are unaware of that
even happening.  File::Util is written to support both old and new features,
syntaxes, and interfaces with full backward-compatibility.
.IP "\fBBe helpful\fR" 4
.IX Item "Be helpful"
If requested, File::Util outputs extremely detailed error messages when
something goes wrong in a File::Util operation.  The diagnostic error
messages not only provide information about what went wrong, but also hints
on how to fix the problem.
.Sp
These error messages can easily be turned on and off.
See \s-1DIAGNOSTICS\s0 for the details.
.IP "\fBBe Pure\fR" 4
.IX Item "Be Pure"
File::Util uses no \s-1XS\s0 or C underpinnings that require you to have a compiler
or make utility on your system in order to use it.  Simply follow standard
installation procedures (\s-1INSTALLATION\s0) and you're
done.  No compiling required.
.SS "What File::Util Is \s-1NOT\s0"
.IX Subsection "What File::Util Is NOT"
File::Util offers significant performance increases over other modules for
most directory-walking and searching, whether doing so in a single
directory or in many directories recursively. \fI(See also the benchmarking\fR
\&\fIand profiling scripts included in the performance subdirectory as part of\fR
\&\fIthis distribution)*\fR
.PP
However File::Util is \fB\s-1NOT\s0\fR a single-purpose file\-finding/searching utility
like File::Find::Rule which offers a handful of extra built-in search features
that File::Util does not give you out of the box, such as searching for files by
owner/group or size.  It is possible to accomplish the same things by
taking advantage of File::Util's callbacks if you want to, but this isn't
the \*(L"one thing\*(R" File::Util was built to do.
.PP
\&\fI*Sometimes it doesn't matter how fast you can search through a directory 1000\fR
\&\fItimes.  Performance alone isn't the best criteria for choosing a module.\fR
.SH "SYNTAX"
.IX Header "SYNTAX"
In the past, File::Util relied on an older method invocation syntax that
was not robust enough to support the newer features that have been added
since version 4.0.  In addition to making new features possible, the new
syntax is more in keeping with what the Perl community has come to expect
from its favorite modules, like Moose and DBIx::Class.
.SS "\s-1OLD\s0 Syntax Example"
.IX Subsection "OLD Syntax Example"
.Vb 2
\&   # this legacy syntax looks clunky and kind of smells like shell script
\&   $f\->list_dir( \*(Aq/some/dir\*(Aq, \*(Aq\-\-recurse\*(Aq, \*(Aq\-\-as\-ref\*(Aq, \*(Aq\-\-pattern=[^\ed]\*(Aq );
.Ve
.SS "\s-1NEW\s0 Syntax Example (Does Much More)"
.IX Subsection "NEW Syntax Example (Does Much More)"
.Vb 11
\&   # This syntax is much more robust, and supports new features
\&   $f\->list_dir(
\&      \*(Aq/some/dir\*(Aq => {
\&         files_match    => { or  => [ qr/bender$/, qr/^flexo/   ] },
\&         parent_matches => { and => [ qr/^Planet/, qr/Express$/ ] },
\&         callback       => \e&deliver_interstellar_shipment,
\&         files_only     => 1,
\&         recurse        => 1,
\&         as_ref         => 1,
\&      }
\&   )
.Ve
.PP
If you already have code that uses the old syntax, \s-1DON\s0'T \s-1WORRY\s0 \*(-- it's still
fully supported behind the scenes.  However, for new code that takes advantage
of new features like higher order functions (callbacks), or advanced matching
for directory listings, you'll need to use the syntax as set forth in this
document.  The old syntax isn't covered here, because you shouldn't use it
anymore.
.PP
\fI\fIAn Explanation Of The \*(L"Options Hashref\*(R"\fI\fR
.IX Subsection "An Explanation Of The Options Hashref"
.PP
As shown in the code example above, the new syntax uses hash references to
specify options for calls to File::Util methods.  This documentation refers to
these as the \*(L"options hashref\*(R".  The code examples below illustrates what they
are and how they are used.  Advanced Perl programmers will recognize these
right away.
.PP
\&\s-1NOTE:\s0 \fI\*(L"hashref\*(R" is short for \*(L"hash reference\*(R".\fR  Hash references use curly
brackets and look like this:
.PP
.Vb 1
\&   my $hashref = { name => \*(AqLarry\*(Aq, language => \*(AqPerl\*(Aq, pet => \*(AqVelociraptor\*(Aq };
.Ve
.PP
File::Util uses these hash references as argument modifiers that allow you to
enable or disable certain features or behaviors, so you get the output you
want, like this:
.PP
.Vb 2
\&   my $result = $ftl\->some_method_call( arg1, arg2, { options hashref } );
\&                                                    # ^^^^^^^^^^^^^^^ #
.Ve
.PP
A couple of real examples would look like this:
.PP
.Vb 2
\&   $ftl\->write_file( \*(Aq/some/file.txt\*(Aq, \*(AqHello World!\*(Aq, { mode => \*(Aqappend\*(Aq } );
\&                                                       # ^^^^^^^^^^^^^^^^ #
\&
\&   $ftl\->list_dir( \*(Aq/home/dangerian\*(Aq => { recurse => 1, files_only => 1 } );
\&                                        # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ #
.Ve
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
.SS "Feature Summary"
.IX Subsection "Feature Summary"
Managing potential errors is a big part of Perl \s-1IO.\s0  File::Util gives you
several options.  In fact, every single call to a File::Util method which
accepts an \*(L"options hashref\*(R" can also include an error handling directive.
File::Util has some pre-defined error handling behaviors that you can choose
from, or you can supply your own error handler routine.  This is accomplished
via the \fB\f(CB\*(C`onfail\*(C'\fB\fR option.
.PP
As an added convenience, when you use this option with the
File::Util constructor method, it sets the default error handling
policy for all failures; in other words, you can set up one error handler
for everything and never have to worry about it after that.
.PP
.Vb 2
\&   # Set every error to cause a warning instead of dying by default
\&   my $ftl = File::Util\->new( { onfail => \*(Aqwarn\*(Aq } );
\&
\&   $ftl\->write_file( \*(AqC:\e\e\*(Aq => \*(Aqwoof!\*(Aq ); # now this call will warn and not die
.Ve
.SS "Details"
.IX Subsection "Details"
The predefined \fB\f(CB\*(C`onfail\*(C'\fB\fR behaviors and their syntaxes are covered below.
.ie n .IP "keyword: \fB\f(CB""die""\fB\fR" 4
.el .IP "keyword: \fB\f(CBdie\fB\fR" 4
.IX Item "keyword: die"
This is what File::Util already does: it calls \f(CW\*(C`CORE::die()\*(C'\fR with an error
message when it encounters a fatal error, and your program terminates.
.Sp
Example:
.Sp
.Vb 1
\&   my $ftl = File::Util\->new( ... { onfail => \*(Aqdie\*(Aq } );
.Ve
.ie n .IP "keyword: \fB\f(CB""zero""\fB\fR" 4
.el .IP "keyword: \fB\f(CBzero\fB\fR" 4
.IX Item "keyword: zero"
When you use the predefined \fB\f(CB\*(C`zero\*(C'\fB\fR behavior as the \f(CW\*(C`onfail\*(C'\fR handler,
File::Util will return a zero value (the integer \f(CW0\fR) if it encounters a fatal
error, instead of dying.  File::Util won't warn about the error or abort
execution.  You will just get a zero back instead of what you would have
gotten otherwise, and execution will continue as if no error happened.
.Sp
Example:
.Sp
.Vb 1
\&   my $content = File::Util\->load_file( ... { onfail => \*(Aqzero\*(Aq } );
.Ve
.ie n .IP "keyword: \fB\f(CB""undefined""\fB\fR" 4
.el .IP "keyword: \fB\f(CBundefined\fB\fR" 4
.IX Item "keyword: undefined"
When you use the predefined \fB\f(CB\*(C`undefined\*(C'\fB\fR behavior as the \f(CW\*(C`onfail\*(C'\fR handler,
if File::Util runs into a fatal error it will return \f(CW\*(C`undef\*(C'\fR.  Execution will
not be aborted, and no warnings will be issued.  A value of undef will just
get sent back to the caller instead of what you would have gotten otherwise.
Execution will then continue on as if no error happened.
.Sp
Note: This option usually makes more practical sense than
\&\f(CW\*(C`onfail => \*(Aqzero\*(Aq\*(C'\fR
.Sp
Example:
.Sp
.Vb 1
\&   my $handle = File::Util\->open_handle( ... { onfail => \*(Aqundefined\*(Aq } );
.Ve
.ie n .IP "keyword: \fB\f(CB""warn""\fB\fR" 4
.el .IP "keyword: \fB\f(CBwarn\fB\fR" 4
.IX Item "keyword: warn"
When you use the predefined \fB\f(CB\*(C`warn\*(C'\fB\fR behavior as the \f(CW\*(C`onfail\*(C'\fR handler,
File::Util will return \f(CW\*(C`undef\*(C'\fR  if it encounters a fatal error, instead of
dying.  Then File::Util will emit a \fBwarning\fR with details about the error,
but will not abort execution.  You will just get a warning message sent to
\&\s-1STDERR\s0 and \f(CW\*(C`undef\*(C'\fR gets sent back to the caller instead of what you would have
gotten otherwise.  Other than the warning, execution will continue as if no
error ever happened.
.Sp
Example:
.Sp
.Vb 1
\&   my $write_ok = File::Util\->write_file( ... { onfail => \*(Aqwarn\*(Aq } );
.Ve
.ie n .IP "keyword: \fB\f(CB""message""\fB\fR" 4
.el .IP "keyword: \fB\f(CBmessage\fB\fR" 4
.IX Item "keyword: message"
When you use the predefined \fB\f(CB\*(C`message\*(C'\fB\fR behavior as the \f(CW\*(C`onfail\*(C'\fR handler,
if File::Util runs into a fatal error it will return an error message in the
form of a string containing details about the problem.  Execution will not
be aborted, and no warnings will be issued.  You will just get an error message
sent back to the caller instead of what you would have gotten otherwise.
Execution will then continue on as if no error happened.
.Sp
Example:
.Sp
.Vb 1
\&   my @files = File::Util\->list_dir( ... { onfail => \*(Aqmessage\*(Aq } );
.Ve
.ie n .IP "\fB\f(CB""subroutine reference""\fB\fR" 4
.el .IP "\fB\f(CBsubroutine reference\fB\fR" 4
.IX Item "subroutine reference"
If you supply a code reference to the \f(CW\*(C`onfail\*(C'\fR option in a File::Util method
call, it will execute that code if it encounters a fatal error.  You must
supply a true code reference, as shown in the examples below, either to a
named or anonymous subroutine.
.Sp
The subroutine you specify will receive two arguments as its input in "\f(CW@_\fR".
The first will be the text of the error message, and the second will be a
stack trace in text format.  You can send them to a logger, to your
sysadmin in an email alert, or whatever you like\*(-- because it is \fB*your*\fR
error handler.
.Sp
\&\fB\s-1WARNING\s0! \fR
\&\fBIf you do not call \f(CB\*(C`die\*(C'\fB or \f(CB\*(C`exit\*(C'\fB at the end of your error handler,\fR
\&\fBFile::Util will \s-1NOT\s0 exit, but continue to execute.\fR  When you opt to use
this feature, you are fully responsible for your process' error handling
and post-error execution.
.Sp
Examples using the constructor:
.Sp
.Vb 2
\&   # step 1) define your custom error handler
\&   sub politician_error_handler {
\&
\&      my ( $err, $stack ) = @_;
\&
\&      # do stuff like ...
\&
\&      $logger\->debug( $stack );
\&
\&      die \*(AqWe neither confirm nor deny that an IO error has happened.\*(Aq;
\&   }
\&
\&   # step 2) apply your error handler
\&   my $ftl = File::Util\->new( { onfail => \e&politician_error_handler } );
\&
\&      \-OR\-
\&
\&   # Define and apply your error handler in one step:
\&
\&   my $ftl = File::Util\->new(
\&      {
\&         onfail => sub {
\&            my ( $err, $stack ) = @_;
\&
\&            # do stuff ...
\&         }
\&      }
\&   );
.Ve
.Sp
Examples in individual method calls:
.Sp
.Vb 1
\&   $ftl\->write_file( \*(Aqgreedo\*(Aq => \*(Aqtry bargain\*(Aq => { onfail => \e&shoot_first } );
\&
\&   my $file_handle = $ftl\->open_handle(
\&      \*(Aq/this/might/not/work\*(Aq => {
\&         onfail => sub {
\&            warn "Couldn\*(Aqt open first choice, trying a backup plan...";
\&            return $ftl\->open_handle( \*(Aq/this/one/should/work\*(Aq );
\&         }
\&      }
\&   );
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
When things go wrong, sometimes it's nice to get as much information as
possible about the error.  In \f(CW\*(C`File::Util\*(C'\fR, you incur no performance penalties
by enabling more verbose error messages.  In fact, you're encouraged to do so.
.PP
You can globally enable diagnostic messages (for every \f(CW\*(C`File::Util\*(C'\fR object you
create), or on a per-object basis, or even on a per-call basis when you just
want to diagnose a problem with a single method invocation.  Here's how:
.IP "Enable Diagnostics Globally" 8
.IX Item "Enable Diagnostics Globally"
.Vb 1
\&   use File::Util qw( :diag );
.Ve
.IP "Enable Diagnostics Per-Object" 8
.IX Item "Enable Diagnostics Per-Object"
.Vb 1
\&   my $ftl = File::Util\->new( diag => 1 );
.Ve
.IP "Enable Diagnostics Temporarily" 8
.IX Item "Enable Diagnostics Temporarily"
.Vb 1
\&   $ftl\->diagnostic( 1 ); # turn diagnostic mode on
\&
\&   # ... do some troubleshooting ...
\&
\&   $ftl\->diagnostic( 0 ); # turn diagnostic mode off
.Ve
.IP "Enable Diagnostics per-call" 8
.IX Item "Enable Diagnostics per-call"
.Vb 1
\&   $ftl\->load_file( \*(Aqabc.txt\*(Aq => { diag => 1 } );
.Ve
.SH "METHODS"
.IX Header "METHODS"
\&\fBNote:\fR In the past, some of the methods listed would state that they were
autoloaded methods.  This mechanism has been changed in favor of more
modern practices, in step with the evolution of computing over the last decade
since File::Util was first released.
.PP
Methods listed in alphabetical order.
.ie n .SS """atomize_path"""
.el .SS "\f(CWatomize_path\fP"
.IX Subsection "atomize_path"
.ie n .IP "\fISyntax:\fR ""atomize_path( [/file/path or file_name] )""" 4
.el .IP "\fISyntax:\fR \f(CWatomize_path( [/file/path or file_name] )\fR" 4
.IX Item "Syntax: atomize_path( [/file/path or file_name] )"
This method is used internally by File::Util to handle absolute filenames on
different platforms in a portable manner, but it can be a useful tool for you
as well.
.Sp
This method takes a single string as its argument.  The string is expected
to be a fully-qualified (absolute) or relative path to a file or directory.
It carefully splits the string into three parts: The root of the path, the
rest of the path, and the final file/directory named in the string.
.Sp
Depending on the input, the root and/or path may be empty strings.  The
following table can serve as a guide in what to expect from \f(CW\*(C`atomize_path()\*(C'\fR
.Sp
.Vb 10
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&   |  INPUT                  |   ROOT   |   PATH\-COMPONENT   |   FILE/DIR     |
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&   |  C:\efoo\ebar\ebaz.txt     |   C:\e    |   foo\ebar          |   baz.txt      |
\&   |  /foo/bar/baz.txt       |   /      |   foo/bar          |   baz.txt      |
\&   |  ./a/b/c/d/e/f/g.txt    |          |   ./a/b/c/d/e/f    |   g.txt        |
\&   |  :a:b:c:d:e:f:g.txt     |   :      |   a:b:c:d:e:f      |   g.txt        |
\&   |  ../wibble/wombat.ini   |          |   ../wibble        |   wombat.ini   |
\&   |  ..\ewoot\enoot.doc       |          |   ..\ewoot          |   noot.doc     |
\&   |  ../../zoot.conf        |          |   ../..            |   zoot.conf    |
\&   |  /root                  |   /      |                    |   root         |
\&   |  /etc/sudoers           |   /      |   etc              |   sudoers      |
\&   |  /                      |   /      |                    |                |
\&   |  D:\e                    |   D:\e    |                    |                |
\&   |  D:\eautorun.inf         |   D:\e    |                    |   autorun.inf  |
\&   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.ie n .SS """bitmask"""
.el .SS "\f(CWbitmask\fP"
.IX Subsection "bitmask"
.ie n .IP "\fISyntax:\fR ""bitmask( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWbitmask( [file name] )\fR" 4
.IX Item "Syntax: bitmask( [file name] )"
Gets the bitmask of the named file, provided the file exists. If the file
exists and is accessible, the bitmask of the named file is returned in four
digit octal notation e.g.\- \f(CW0644\fR.  Otherwise, returns \f(CW\*(C`undef\*(C'\fR if the file
does \fInot\fR exist or could not be accessed.
.ie n .SS """can_flock"""
.el .SS "\f(CWcan_flock\fP"
.IX Subsection "can_flock"
.ie n .IP "\fISyntax:\fR ""can_flock""" 4
.el .IP "\fISyntax:\fR \f(CWcan_flock\fR" 4
.IX Item "Syntax: can_flock"
Returns 1 if the current system claims to support \f(CW\*(C`flock()\*(C'\fR \fIand\fR if the
Perl process can successfully call it.  \fI(see \*(L"flock\*(R" in perlfunc.)\fR  Unless
both of these conditions are true, a zero value (0) is returned.  This is a
constant method.  It accepts no arguments and will always return the same
value for the system on which it is executed.
.Sp
\&\fBNote:\fR Perl tries to support or emulate flock whenever it can via
available system calls, namely \f(CW\*(C`flock\*(C'\fR; \f(CW\*(C`lockf\*(C'\fR; or with \f(CW\*(C`fcntl\*(C'\fR.
.ie n .SS """created"""
.el .SS "\f(CWcreated\fP"
.IX Subsection "created"
.ie n .IP "\fISyntax:\fR ""created( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWcreated( [file name] )\fR" 4
.IX Item "Syntax: created( [file name] )"
Returns the time of creation for the named file in non-leap seconds since
whatever your system considers to be the epoch.  Suitable for feeding to
Perl's built-in functions \*(L"gmtime\*(R" and \*(L"localtime\*(R".  \fI(see \*(L"time\*(R" in perlfunc.)\fR
.ie n .SS """diagnostic"""
.el .SS "\f(CWdiagnostic\fP"
.IX Subsection "diagnostic"
.ie n .IP "\fISyntax:\fR ""diagnostic( [true / false value] )""" 4
.el .IP "\fISyntax:\fR \f(CWdiagnostic( [true / false value] )\fR" 4
.IX Item "Syntax: diagnostic( [true / false value] )"
When called without any arguments, this method returns a true or false value
to reflect the current setting for the use of diagnostic (verbose) error
messages when a File::Util object encounters errors.
.Sp
When called with a true or false value as its single argument, this tells
the File::Util object whether or not it should enable diagnostic
error messages in the event of a failure.  A true value indicates that the
File::Util object will enable diagnostic mode, and a false value indicates
that it will not.  The default setting for \f(CW\*(C`diagnostic()\*(C'\fR is \f(CW0\fR
(\s-1NOT\s0 enabled.)
.Sp
\&\fIsee also \s-1DIAGNOSTICS\s0\fR
.ie n .SS """default_path"""
.el .SS "\f(CWdefault_path\fP"
.IX Subsection "default_path"
.ie n .IP "\fISyntax:\fR ""default_path( [string, string] )""" 4
.el .IP "\fISyntax:\fR \f(CWdefault_path( [string, string] )\fR" 4
.IX Item "Syntax: default_path( [string, string] )"
The second string argument is optional.
.Sp
Works just like \f(CW\*(C`strict_path\*(C'\fR, except that instead of
returning \f(CW\*(C`undef\*(C'\fR when the argument passed in doesn't look like a path,
it will return a default string instead.  The default string returned
will either be the built-in default path, or the string you specify as
a second argument to this method.
.Sp
The default string returned by this method is '.' . \s-1SL\s0
\&\fI(see \s-1SL\s0)\fR
.Sp
This means that on windows, the built-in default would be \f(CW\*(C`.\e\*(C'\fR whereas on
a POSIX-compliant system (Linux, \s-1UNIX,\s0 Mac, etc) you would get \f(CW\*(C`./\*(C'\fR
.Sp
\&\fIsee also strict_path)\fR
.ie n .SS """ebcdic"""
.el .SS "\f(CWebcdic\fP"
.IX Subsection "ebcdic"
.ie n .IP "\fISyntax:\fR ""ebcdic""" 4
.el .IP "\fISyntax:\fR \f(CWebcdic\fR" 4
.IX Item "Syntax: ebcdic"
Returns 1 if the machine on which the code is running uses \s-1EBCDIC,\s0 or returns
0 if not.  \fI(see perlebcdic.)\fR  This is a constant method.  It accepts
no arguments and will always return the same value for the system on which it
is executed.
.ie n .SS """escape_filename"""
.el .SS "\f(CWescape_filename\fP"
.IX Subsection "escape_filename"
.ie n .IP "\fISyntax:\fR ""escape_filename( [string], [escape char] )""" 4
.el .IP "\fISyntax:\fR \f(CWescape_filename( [string], [escape char] )\fR" 4
.IX Item "Syntax: escape_filename( [string], [escape char] )"
Returns it's argument in an escaped form that is suitable for use as a filename.
Illegal characters (i.e.\- any type of newline character, tab, vtab, and the
following \f(CW\*(C`/ | * " ? < : > \e\*(C'\fR), are replaced with [escape char] or
"\fB_\fR" if no [escape char] is specified.  Returns an empty string if no
arguments are provided.
.ie n .SS """existent"""
.el .SS "\f(CWexistent\fP"
.IX Subsection "existent"
.ie n .IP "\fISyntax:\fR ""existent( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWexistent( [file name] )\fR" 4
.IX Item "Syntax: existent( [file name] )"
Returns 1 if the named file (or directory) exists.  Otherwise a value of
undef is returned.
.Sp
This works the same as Perl's built-in \f(CW\*(C`\-e\*(C'\fR file test operator,
\&\fI(see \*(L"\-X\*(R" in perlfunc)\fR, it's just easier for some people to remember.
.ie n .SS """file_type"""
.el .SS "\f(CWfile_type\fP"
.IX Subsection "file_type"
.ie n .IP "\fISyntax:\fR ""file_type( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWfile_type( [file name] )\fR" 4
.IX Item "Syntax: file_type( [file name] )"
Returns a list of keywords corresponding to each of Perl's built in file tests
(those specific to file types) for which the named file returns true.
\&\fI(see \*(L"\-X\*(R" in perlfunc.)\fR
.Sp
The keywords and their definitions appear below; the order of keywords returned
is the same as the order in which the are listed here:
.RS 4
.ie n .IP """PLAIN             File is a plain file.""" 4
.el .IP "\f(CWPLAIN             File is a plain file.\fR" 4
.IX Item "PLAIN File is a plain file."
.PD 0
.ie n .IP """TEXT              File is a text file.""" 4
.el .IP "\f(CWTEXT              File is a text file.\fR" 4
.IX Item "TEXT File is a text file."
.ie n .IP """BINARY            File is a binary file.""" 4
.el .IP "\f(CWBINARY            File is a binary file.\fR" 4
.IX Item "BINARY File is a binary file."
.ie n .IP """DIRECTORY         File is a directory.""" 4
.el .IP "\f(CWDIRECTORY         File is a directory.\fR" 4
.IX Item "DIRECTORY File is a directory."
.ie n .IP """SYMLINK           File is a symbolic link.""" 4
.el .IP "\f(CWSYMLINK           File is a symbolic link.\fR" 4
.IX Item "SYMLINK File is a symbolic link."
.ie n .IP """PIPE              File is a named pipe (FIFO).""" 4
.el .IP "\f(CWPIPE              File is a named pipe (FIFO).\fR" 4
.IX Item "PIPE File is a named pipe (FIFO)."
.ie n .IP """SOCKET            File is a socket.""" 4
.el .IP "\f(CWSOCKET            File is a socket.\fR" 4
.IX Item "SOCKET File is a socket."
.ie n .IP """BLOCK             File is a block special file.""" 4
.el .IP "\f(CWBLOCK             File is a block special file.\fR" 4
.IX Item "BLOCK File is a block special file."
.ie n .IP """CHARACTER         File is a character special file.""" 4
.el .IP "\f(CWCHARACTER         File is a character special file.\fR" 4
.IX Item "CHARACTER File is a character special file."
.RE
.RS 4
.RE
.PD
.ie n .SS """flock_rules"""
.el .SS "\f(CWflock_rules\fP"
.IX Subsection "flock_rules"
.ie n .IP "\fISyntax:\fR ""flock_rules( [keyword list] )""" 4
.el .IP "\fISyntax:\fR \f(CWflock_rules( [keyword list] )\fR" 4
.IX Item "Syntax: flock_rules( [keyword list] )"
Sets I/O race condition policy, or tells File::Util how it should handle race
conditions created when a file can't be locked because it is already locked
somewhere else (usually by another process).
.Sp
An empty call to this method returns a list of keywords representing the rules
that are currently in effect for the object.
.Sp
Otherwise, a call should include a list containing your chosen
directive keywords in order of precedence.  The rules will be applied in
cascading order when a File::Util object attempts to lock a file, so if the
actions specified by the first rule don't result in success, the second rule
is applied, and so on.
.Sp
This setting can be dynamically changed at any point in your code by calling
this method as desired.
.Sp
\&\fBThe default behavior of File::Util is to try and obtain an exclusive lock\fR
\&\fBon all file opens (if supported by your operating system).  If a lock cannot\fR
\&\fBbe obtained, File::Util will throw an exception and exit.\fR
.Sp
If you want to change that behavior, this method is the way to do it.  One
common situation is for someone to want their code to first try for a lock,
and failing that, to wait until one can be obtained.  If that's what you
want, see the examples after the keywords list below.
.Sp
Recognized keywords:
.RS 4
.ie n .IP """NOBLOCKEX""" 4
.el .IP "\f(CWNOBLOCKEX\fR" 4
.IX Item "NOBLOCKEX"
tries to get an exclusive lock on the file without blocking (waiting)
.ie n .IP """NOBLOCKSH""" 4
.el .IP "\f(CWNOBLOCKSH\fR" 4
.IX Item "NOBLOCKSH"
tries to get a shared lock on the file without blocking
.ie n .IP """BLOCKEX""" 4
.el .IP "\f(CWBLOCKEX\fR" 4
.IX Item "BLOCKEX"
waits to get an exclusive lock
.ie n .IP """BLOCKSH""" 4
.el .IP "\f(CWBLOCKSH\fR" 4
.IX Item "BLOCKSH"
waits to get a shared lock
.ie n .IP """FAIL""" 4
.el .IP "\f(CWFAIL\fR" 4
.IX Item "FAIL"
dies with stack trace
.ie n .IP """WARN""" 4
.el .IP "\f(CWWARN\fR" 4
.IX Item "WARN"
\&\fIwarn()\fRs about the error and returns undef
.ie n .IP """IGNORE""" 4
.el .IP "\f(CWIGNORE\fR" 4
.IX Item "IGNORE"
ignores the failure to get an exclusive lock
.ie n .IP """UNDEF""" 4
.el .IP "\f(CWUNDEF\fR" 4
.IX Item "UNDEF"
returns undef
.ie n .IP """ZERO""" 4
.el .IP "\f(CWZERO\fR" 4
.IX Item "ZERO"
returns 0
.RE
.RS 4
.Sp
Examples:
.ie n .IP "ex\- ""flock_rules( qw( NOBLOCKEX FAIL ) );""" 4
.el .IP "ex\- \f(CWflock_rules( qw( NOBLOCKEX FAIL ) );\fR" 4
.IX Item "ex- flock_rules( qw( NOBLOCKEX FAIL ) );"
This is the default policy.  When in effect, the File::Util object will first
attempt to get a non-blocking exclusive lock on the file.  If that attempt
fails the File::Util object will call \fIdie()\fR with an error.
.ie n .IP "ex\- ""flock_rules( qw( NOBLOCKEX BLOCKEX FAIL ) );""" 4
.el .IP "ex\- \f(CWflock_rules( qw( NOBLOCKEX BLOCKEX FAIL ) );\fR" 4
.IX Item "ex- flock_rules( qw( NOBLOCKEX BLOCKEX FAIL ) );"
The File::Util object will first attempt to get a non-blocking exclusive lock
on the file.  If that attempt fails it falls back to the second policy rule
\&\*(L"\s-1BLOCKEX\*(R"\s0 and tries again to get an exclusive lock on the file, but this time
by blocking (waiting for its turn).  If that second attempt fails, the
File::Util object will fail with an error.
.ie n .IP "ex\- ""flock_rules( qw( BLOCKEX IGNORE ) );""" 4
.el .IP "ex\- \f(CWflock_rules( qw( BLOCKEX IGNORE ) );\fR" 4
.IX Item "ex- flock_rules( qw( BLOCKEX IGNORE ) );"
The File::Util object will first attempt to get a file non-blocking lock on
the file.  If that attempt fails it will ignore the error, and go on to open
the file anyway and no failures or warnings will occur.
.RE
.RS 4
.RE
.ie n .SS """is_bin"""
.el .SS "\f(CWis_bin\fP"
.IX Subsection "is_bin"
.ie n .IP "\fISyntax:\fR ""is_bin( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWis_bin( [file name] )\fR" 4
.IX Item "Syntax: is_bin( [file name] )"
Returns 1 if the named file (or directory) exists.  Otherwise a value of undef
is returned, indicating that the named file either does not exist or is of
another file type.
.Sp
This works the same as Perl's built-in \f(CW\*(C`\-B\*(C'\fR file test operator,
\&\fI(see \*(L"\-X\*(R" in perlfunc)\fR, it's just easier for some people to remember.
.ie n .SS """is_readable"""
.el .SS "\f(CWis_readable\fP"
.IX Subsection "is_readable"
.ie n .IP "\fISyntax:\fR ""is_readable( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWis_readable( [file name] )\fR" 4
.IX Item "Syntax: is_readable( [file name] )"
Returns 1 if the named file (or directory) is \fBreadable\fR by your program
according to the applied permissions of the file system on which the file
resides.  Otherwise a value of undef is returned.
.Sp
This works the same as Perl's built-in \f(CW\*(C`\-r\*(C'\fR file test operator,
\&\fI(see \*(L"\-X\*(R" in perlfunc)\fR, it's just easier for some people to remember.
.ie n .SS """is_writable"""
.el .SS "\f(CWis_writable\fP"
.IX Subsection "is_writable"
.ie n .IP "\fISyntax:\fR ""is_writable( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWis_writable( [file name] )\fR" 4
.IX Item "Syntax: is_writable( [file name] )"
Returns 1 if the named file (or directory) is \fBwritable\fR by your program
according to the applied permissions of the file system on which the file
resides.  Otherwise a value of undef is returned.
.Sp
This works the same as Perl's built-in \f(CW\*(C`\-w\*(C'\fR file test operator,
\&\fI(see \*(L"\-X\*(R" in perlfunc)\fR, it's just easier for some people to remember.
.ie n .SS """last_access"""
.el .SS "\f(CWlast_access\fP"
.IX Subsection "last_access"
.ie n .IP "\fISyntax:\fR ""last_access( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWlast_access( [file name] )\fR" 4
.IX Item "Syntax: last_access( [file name] )"
Returns the last accessed time for the named file in non-leap seconds since
whatever your system considers to be the epoch.  Suitable for feeding to
Perl's built-in functions \*(L"gmtime\*(R" and \*(L"localtime\*(R".  \fI(see \*(L"time\*(R" in perlfunc.)\fR
.ie n .SS """last_changed"""
.el .SS "\f(CWlast_changed\fP"
.IX Subsection "last_changed"
.ie n .IP "\fISyntax:\fR ""last_changed( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWlast_changed( [file name] )\fR" 4
.IX Item "Syntax: last_changed( [file name] )"
Returns the inode change time for the named file in non-leap seconds since
whatever your system considers to be the epoch.  Suitable for feeding to
Perl's built-in functions \*(L"gmtime\*(R" and \*(L"localtime\*(R".  \fI(see \*(L"time\*(R" in perlfunc.)\fR
.ie n .SS """last_modified"""
.el .SS "\f(CWlast_modified\fP"
.IX Subsection "last_modified"
.ie n .IP "\fISyntax:\fR ""last_modified( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWlast_modified( [file name] )\fR" 4
.IX Item "Syntax: last_modified( [file name] )"
Returns the last modified time for the named file in non-leap seconds since
whatever your system considers to be the epoch.  Suitable for feeding to
Perl's built-in functions \*(L"gmtime\*(R" and \*(L"localtime\*(R".  \fI(see \*(L"time\*(R" in perlfunc.)\fR
.ie n .SS """line_count"""
.el .SS "\f(CWline_count\fP"
.IX Subsection "line_count"
.ie n .IP "\fISyntax:\fR ""line_count( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWline_count( [file name] )\fR" 4
.IX Item "Syntax: line_count( [file name] )"
Returns the number of lines in the named file.  Fails with an error if the
named file does not exist.
.ie n .SS """list_dir"""
.el .SS "\f(CWlist_dir\fP"
.IX Subsection "list_dir"
.ie n .IP "\fISyntax:\fR ""list_dir( [directory name] => { option => value, ... } )""" 4
.el .IP "\fISyntax:\fR \f(CWlist_dir( [directory name] => { option => value, ... } )\fR" 4
.IX Item "Syntax: list_dir( [directory name] => { option => value, ... } )"
Returns all file names in the specified directory, sorted in alphabetical
order.  Fails with an error if no such directory is found, or if the
directory is inaccessible.
.Sp
Note that this is one of File::Util's most robust methods, and can be very
useful.  It can be used as a higher order function (accepting callback
subrefs), and can be used for advanced pattern matching against files.
It can also return a hierarchical data structure of the file tree you ask it to
walk.
.Sp
See the File::Util::Manual::Examples for several useful ways to use
\&\f(CW\*(C`list_dir()\*(C'\fR.
.Sp
Syntax example to recursively return a list of subdirectories in
directory \*(L"dir_name\*(R":
.Sp
.Vb 1
\&   my @dirs = $f\->list_dir( \*(Aqdir_name\*(Aq => { dirs_only => 1, recurse => 1 } );
.Ve
.RS 4
.ie n .IP "\fBOptions accepted by \f(CB""list_dir()""\fB\fR" 4
.el .IP "\fBOptions accepted by \f(CBlist_dir()\fB\fR" 4
.IX Item "Options accepted by list_dir()"
.RS 4
.PD 0
.ie n .IP """callback => subroutine reference""" 4
.el .IP "\f(CWcallback => subroutine reference\fR" 4
.IX Item "callback => subroutine reference"
.PD
\&\f(CW\*(C`list_dir()\*(C'\fR can accept references to subroutines of your own.  If you
pass it a code reference using this option, File::Util will execute your
code every time \fIlist_dir()\fR enters a directory.  This is particularly useful
when combined with the \f(CW\*(C`recurse\*(C'\fR option which is explained below.
.Sp
When you create a callback function, the File::Util will pass it four
arguments in this order: The name of the current directory, a reference to a
list of subdirectories in the current directory, a reference to a list of files
in the current directory, and the depth (positive integer) relative to the
directory you provided as your first argument to \f(CW\*(C`list_dir()\*(C'\fR.
\&\fIThis means if you pass in a path such as\fR \f(CW\*(C`/var/tmp\*(C'\fR,
\&\fIthat \*(L"/var/tmp\*(R" is at a depth of 0, \*(L"/var/tmp/foo\*(R" is 1 deep, and so on\fR
\&\fIdown through the \*(L"/var/tmp\*(R" directory.\fR
.Sp
Remember that the code in your callback gets executed in real time,
\&\fIas \fIlist_dir()\fI is walking the directory tree\fR.  Consider this example:
.Sp
.Vb 2
\&   # Define a subroutine to print the byte size and depth of all files in a
\&   # directory, designed to be used as a callback function to list_dir()
\&
\&   sub filesize {
\&      my ( $selfdir, $subdirs, $files, $depth ) = @_;
\&
\&      print "$_ | " . ( \-s $_ ) . " | $depth levels deep\en" for @$files;
\&   }
\&
\&   # Now list directory recursively, invoking the callback on every recursion
\&
\&   $f\->list_dir( \*(Aq./droids\*(Aq => { recurse => 1, callback => \e&filesize } );
\&
\&   # Output would look something like
\&   #
\&   #   ./droids/by\-owner/luke/R2.spec | 1024 | 3 deep
\&   #   ./droids/by\-owner/luke/C2P0.spec | 2048 | 3 deep
\&   #   ./droids/by\-boss/dooku/Grievous.spec | 4096 | 3 deep
\&   #   ./droids/by\-series/imperial/sentries/R5.spec | 1024 | 4 deep
\&   #
\&   # Depth breakdown
\&   #
\&   #    level 0 => ./droids/
\&   #    level 1 => ./droids/by\-owner/
\&   #    level 1 => ./droids/by\-boss/
\&   #    level 1 => ./droids/by\-series/
\&   #    level 2 => ./droids/by\-owner/luke/
\&   #    level 2 => ./droids/by\-boss/dooku/
\&   #    level 2 => ./droids/by\-series/imperial/
\&   #    level 3 => ./droids/by\-series/imperial/sentries/
.Ve
.Sp
Another way to use callbacks is in combination with closures, to \*(L"close around\*(R"
a variable or variables defined in the same scope as the callback.  A demonstration
of this technique is shown below:
.Sp
.Vb 3
\&   {
\&      my $size_total;
\&      my $dir = \*(AqC:\eUsers\esuperman\eprojects\escripts_and_binaries\*(Aq;
\&
\&      # how many total bytes are in all of the executable files in $dir
\&
\&      $f\->list_dir(
\&         $dir => {
\&            callback => sub {
\&               my ( $selfdir, $subdirs, $files, $depth ) = @_;
\&
\&               $size_total += \-s $_ for grep { \-B $_ } @$files;
\&            }
\&         }
\&      );
\&
\&      print "There\*(Aqs $size_total bytes of binary files in my projects dir.";
\&   }
.Ve
.ie n .IP """d_callback => subroutine reference""" 4
.el .IP "\f(CWd_callback => subroutine reference\fR" 4
.IX Item "d_callback => subroutine reference"
A \f(CW\*(C`d_callback\*(C'\fR is just like a \f(CW\*(C`callback\*(C'\fR, except it is only executed
on directories encountered in the file tree, not files, and its input
is slightly different.  \f(CW@_\fR is comprised of (in order) the name of the
current directory, a reference to a list of all subdirectories in that
directory, and the depth (positive integer) relative to the \fBtop level\fR
directory in the path you provided as your first argument to \f(CW\*(C`list_dir\*(C'\fR.
.ie n .IP """f_callback => subroutine reference""" 4
.el .IP "\f(CWf_callback => subroutine reference\fR" 4
.IX Item "f_callback => subroutine reference"
Similarly an \f(CW\*(C`f_callback\*(C'\fR is just like a \f(CW\*(C`callback\*(C'\fR, except it is only
concerned with files encountered in the file tree, not directories.  It's input
is also slightly different.  \f(CW@_\fR is comprised of (in order) the name of the
current directory, a reference to a list of all files present in that
directory, and the depth (positive integer) relative to the \fBtop level\fR
directory in the path you provided as your first argument to \f(CW\*(C`list_dir\*(C'\fR.
.ie n .IP """dirs_only => boolean""" 4
.el .IP "\f(CWdirs_only => boolean\fR" 4
.IX Item "dirs_only => boolean"
return only directory contents which are also directories
.ie n .IP """files_only => boolean""" 4
.el .IP "\f(CWfiles_only => boolean\fR" 4
.IX Item "files_only => boolean"
return only directory contents which are files
.ie n .IP """max_depth => positive integer""" 4
.el .IP "\f(CWmax_depth => positive integer\fR" 4
.IX Item "max_depth => positive integer"
Works just like the \f(CW\*(C`\-maxdepth\*(C'\fR flag in the \s-1GNU\s0 find command.  This option
tells \f(CW\*(C`list_dir()\*(C'\fR to limit results to directories at no more than the maximum
depth you specify.  This only works in tandem with the \f(CW\*(C`recurse\*(C'\fR option
(or the \f(CW\*(C`recurse_fast\*(C'\fR option which is similar).
.Sp
For compatibility reasons, you can use "\f(CW\*(C`maxdepth\*(C'\fR" without the underscore
instead, and get the same functionality.
.ie n .IP """no_fsdots => boolean""" 4
.el .IP "\f(CWno_fsdots => boolean\fR" 4
.IX Item "no_fsdots => boolean"
do not include \*(L".\*(R" and \*(L"..\*(R" in the list of directory contents returned
.ie n .IP """abort_depth => positive integer""" 4
.el .IP "\f(CWabort_depth => positive integer\fR" 4
.IX Item "abort_depth => positive integer"
Override the global limit on abort_depth recursions for
directory listings, on a per-listing basis with this option.  Just like the
main \f(CW\*(C`abort_depth()\*(C'\fR object method, this option takes a positive integer.  The
default is 1000.  Sometimes it is useful to increase this number by quite a lot
when walking directories with callbacks.
.ie n .IP """with_paths => boolean""" 4
.el .IP "\f(CWwith_paths => boolean\fR" 4
.IX Item "with_paths => boolean"
Return results with the preceding file paths intact, relative
to the directory named in the call.
.ie n .IP """recurse => boolean""" 4
.el .IP "\f(CWrecurse => boolean\fR" 4
.IX Item "recurse => boolean"
Recurse into subdirectories.  In other words, open up subdirectories and
continue to descend into the directory tree either as far as it goes, or until
the \f(CW\*(C`abort_depth\*(C'\fR limit is reached. \fISee \fIabort_depth()\fI\fR
.ie n .IP """recurse_fast => boolean""" 4
.el .IP "\f(CWrecurse_fast => boolean\fR" 4
.IX Item "recurse_fast => boolean"
Recurse into subdirectories, without checking for filesystem loops.  This
works exactly like the \f(CW\*(C`recurse\*(C'\fR option, except it turns off internal
checking for duplicate inodes while descending through a file tree.
.Sp
You get a performance boost at the sacrifice of a little \*(L"safety checking\*(R".
.Sp
The bigger your file tree, the more performance gains you see.
.Sp
This option has no effect on Windows. \fI(see perldoc \-f stat)\fR
.ie n .IP """dirs_as_ref => boolean""" 4
.el .IP "\f(CWdirs_as_ref => boolean\fR" 4
.IX Item "dirs_as_ref => boolean"
When returning directory listing, include first a reference to the list
of subdirectories found, followed by anything else returned by the call.
.ie n .IP """files_as_ref => boolean""" 4
.el .IP "\f(CWfiles_as_ref => boolean\fR" 4
.IX Item "files_as_ref => boolean"
When returning directory listing, include last a reference to the list
of files found, preceded by a list of subdirectories found (or preceded
by a list reference to subdirectories found if \f(CW\*(C`dirs_as_ref\*(C'\fR was also used).
.ie n .IP """as_ref => boolean""" 4
.el .IP "\f(CWas_ref => boolean\fR" 4
.IX Item "as_ref => boolean"
Return a pair list references: the first is a reference to any subdirectories
found by the call, the second is a reference to any files found by the call.
.ie n .IP """sl_after_dirs => boolean""" 4
.el .IP "\f(CWsl_after_dirs => boolean\fR" 4
.IX Item "sl_after_dirs => boolean"
Append a directory separator (\*(L"/, \*(R"\e\*(L", or \*(R":" depending on your system)
to all directories found by the call.  Useful in visual displays for quick
differentiation between subdirectories and files.
.ie n .IP """ignore_case => boolean""" 4
.el .IP "\f(CWignore_case => boolean\fR" 4
.IX Item "ignore_case => boolean"
Return items in a case-insensitive alphabetic sort order, as opposed to the
default.
.Sp
**By default, items returned by the call to this method are alphabetically
sorted in a case-insensitive manner, such that \*(L"Zoo.txt\*(R" comes before
\&\*(L"alligator.txt\*(R".  This is also the way files are listed at the system
level on most operating systems.
.Sp
However, if you'd like the directory contents returned by this method to be
sorted without regard to case, use this option.  That way, \*(L"alligator.txt\*(R"
will come before \*(L"Zoo.txt\*(R".
.ie n .IP """count_only => boolean""" 4
.el .IP "\f(CWcount_only => boolean\fR" 4
.IX Item "count_only => boolean"
Returns a single value: an integer reflecting the number of items found in
the directory after applying any filter criteria that may also have been
specified by other options (i.e.\- \*(L"dirs_only\*(R", \*(L"recurse\*(R", etc.)
.ie n .IP """as_tree => boolean""" 4
.el .IP "\f(CWas_tree => boolean\fR" 4
.IX Item "as_tree => boolean"
Returns a hierarchical data structure (hashref) of the file tree in the directory
you specify as the first argument to \f(CW\*(C`list_dir()\*(C'\fR.  Use in combination with
other options to get the exact results you want in the data structure.
.Sp
*Note: When using this option, the \f(CW"files_only"\fR and \f(CW"dirs_only"\fR options
are ignored, but you can still specify things like a \f(CW"max_depth"\fR argument,
however.  Note also that you need to specifically call this with the
\&\f(CW"recurse"\fR or \f(CW"recurse_fast"\fR option or you will only get a single-level
tree structure.
.Sp
One quick example:
.Sp
.Vb 6
\&   my $tree = $ftl\->list_dir(
\&      \*(Aq/tmp\*(Aq => {
\&         as_tree  => 1,
\&         recurse  => 1,
\&      }
\&   );
\&
\&   # output would look something like this if you Data::Dumper\*(Aqd it
\&   {
\&     \*(Aq/\*(Aq => {
\&              \*(Aq_DIR_PARENT_\*(Aq => undef,
\&              \*(Aq_DIR_SELF_\*(Aq => \*(Aq/\*(Aq,
\&              \*(Aqtmp\*(Aq => {
\&                         \*(Aq_DIR_PARENT_\*(Aq => \*(Aq/\*(Aq,
\&                         \*(Aq_DIR_SELF_\*(Aq => \*(Aq/tmp\*(Aq,
\&                         \*(AqhJMOsoGuEb\*(Aq => {
\&                                           \*(Aq_DIR_PARENT_\*(Aq => \*(Aq/tmp\*(Aq,
\&                                           \*(Aq_DIR_SELF_\*(Aq => \*(Aq/tmp/hJMOsoGuEb\*(Aq,
\&                                           \*(Aqa.txt\*(Aq => \*(Aq/tmp/hJMOsoGuEb/a.txt\*(Aq,
\&                                           \*(Aqb.log\*(Aq => \*(Aq/tmp/hJMOsoGuEb/b.log\*(Aq,
\&                                           \*(Aqc.ini\*(Aq => \*(Aq/tmp/hJMOsoGuEb/c.ini\*(Aq,
\&                                           \*(Aqd.bat\*(Aq => \*(Aq/tmp/hJMOsoGuEb/d.bat\*(Aq,
\&                                           \*(Aqe.sh\*(Aq => \*(Aq/tmp/hJMOsoGuEb/e.sh\*(Aq,
\&                                           \*(Aqf.conf\*(Aq => \*(Aq/tmp/hJMOsoGuEb/f.conf\*(Aq,
\&                                           \*(Aqg.bin\*(Aq => \*(Aq/tmp/hJMOsoGuEb/g.bin\*(Aq,
\&                                           \*(Aqh.rc\*(Aq => \*(Aq/tmp/hJMOsoGuEb/h.rc\*(Aq,
\&                                         }
\&                       }
\&            }
\&   }
.Ve
.Sp
When using this option, the hashref you get back will have certain metadata
entries at each level of the hierarchy, namely there will be two special
keys: \*(L"_DIR_SELF\*(R", and \*(L"_DIR_PARENT_\*(R".  Their values will be the name of
the directory itself, and the name of its parent, respectively.
.Sp
That metadata can be extremely helpful when iterating over and parsing the
hashref later on, but if you don't want the metadata, include the
\&\f(CW\*(C`dirmeta\*(C'\fR option and set it to a zero (false) value as shown below:
.Sp
.Vb 7
\&   my $tree = $ftl\->list_dir(
\&      \*(Aq/some/dir\*(Aq => {
\&         as_tree  => 1,
\&         recurse  => 1,
\&         dirmeta  => 0,
\&      }
\&   );
.Ve
.Sp
**Remember: the \f(CW\*(C`as_tree\*(C'\fR doesn't recurse into subdirectories unless you tell
it to with \f(CW\*(C`recurse => 1\*(C'\fR
.RE
.RS 4
.RE
.ie n .IP "\fBFiltering and Matching with \f(CB""list_dir()""\fB\fR" 4
.el .IP "\fBFiltering and Matching with \f(CBlist_dir()\fB\fR" 4
.IX Item "Filtering and Matching with list_dir()"
\&\f(CW\*(C`list_dir()\*(C'\fR can use Perl Regular Expressions to match against
and thereby filter the results it returns.  It can match based on file name,
directory name, the path preceding results, and the parent directory of
results.  The matching arguments you use must be real regular expression
references as shown (i.e.\- \s-1NOT\s0 strings).
.Sp
Regular expressions can be provided as a single argument value, or a
specifically crafted hashref designating a list of patterns to match against
in either an \*(L"or\*(R" manner, or an \*(L"and\*(R"ed cumulative manner.
.Sp
Some short examples of proper syntax will be provided after the list of
matching options below.
.Sp
\&\fI**If you experience a big slowdown in directory listings while\fR
\&\fIusing regular expressions, check to make sure your regular expressions are\fR
\&\fIproperly written and optimized.  In general, directory listings should\fR
\&\fInot be slow or resource-intensive.  Badly-written regular expressions will\fR
\&\fIresult in considerable slowdowns and bottlenecks in any application.\fR
.RS 4
.ie n .IP """files_match => qr/regexp/""" 4
.el .IP "\f(CWfiles_match => qr/regexp/\fR" 4
.IX Item "files_match => qr/regexp/"
.PD 0
.ie n .IP "\fI\s-1OR:\s0\fR ""files_match => { and/or => [ qr/listref of/, qr/regexps/ ] }""" 4
.el .IP "\fI\s-1OR:\s0\fR \f(CWfiles_match => { and/or => [ qr/listref of/, qr/regexps/ ] }\fR" 4
.IX Item "OR: files_match => { and/or => [ qr/listref of/, qr/regexps/ ] }"
.PD
Return only file names matching the regex(es).  Preceding directories are
included in the results; for technical reasons they are not excluded (if they
were excluded, \f(CW\*(C`list_dir()\*(C'\fR would not be able to \*(L"cascade\*(R" or recurse into
subdirectories in search of matching files.
.Sp
Use the \f(CW\*(C`files_only\*(C'\fR option in combination with this matching parameter to
exclude the preceding directory names.
.ie n .IP """dirs_match => qr/regexp/""" 4
.el .IP "\f(CWdirs_match => qr/regexp/\fR" 4
.IX Item "dirs_match => qr/regexp/"
.PD 0
.ie n .IP "\fI\s-1OR:\s0\fR ""dirs_match => { and/or => [ qr/listref of/, qr/regexps/ ] }""" 4
.el .IP "\fI\s-1OR:\s0\fR \f(CWdirs_match => { and/or => [ qr/listref of/, qr/regexps/ ] }\fR" 4
.IX Item "OR: dirs_match => { and/or => [ qr/listref of/, qr/regexps/ ] }"
.PD
Return only files and subdirectory names in directories that match the
regex(es) you specify.  \fB\s-1BE CAREFUL\s0\fR with this one!!  It doesn't \*(L"cascade\*(R"
the way you might expect; for technical reasons, it won't descend into
directories that don't match the regex(es) you provide.  For example, if you
want to match a directory name that is three levels deep against a given
pattern, but don't know (or don't care about) the names of the intermediate
directories\*(-- \s-1THIS IS NOT THE OPTION YOU ARE LOOKING FOR.\s0  Use the
\&\f(CW\*(C`path_matches\*(C'\fR option instead.
.Sp
\&\fB*NOTE:\fR Bear in mind that just because you tell \f(CW\*(C`list_dir()\*(C'\fR to match each
directory against the regex(es) you specify here, that doesn't mean you are
telling it to only show directories in its results.  You will get file names
in matching directories included in the results as well, unless you combine
this with the \f(CW\*(C`dirs_only\*(C'\fR option.
.ie n .IP """path_matches => qr/regexp/""" 4
.el .IP "\f(CWpath_matches => qr/regexp/\fR" 4
.IX Item "path_matches => qr/regexp/"
.PD 0
.ie n .IP "\fI\s-1OR:\s0\fR ""path_matches => { and/or => [ qr/listref of/, qr/regexps/ ] }""" 4
.el .IP "\fI\s-1OR:\s0\fR \f(CWpath_matches => { and/or => [ qr/listref of/, qr/regexps/ ] }\fR" 4
.IX Item "OR: path_matches => { and/or => [ qr/listref of/, qr/regexps/ ] }"
.PD
Return only files and subdirectory names with preceding paths that match the
regex(es) you specify.
.ie n .IP """parent_matches => qr/regexp reference/""" 4
.el .IP "\f(CWparent_matches => qr/regexp reference/\fR" 4
.IX Item "parent_matches => qr/regexp reference/"
.PD 0
.ie n .IP "\fI\s-1OR:\s0\fR ""parent_matches => { and/or => [ qr/listref of/, qr/regexps/ ] }""" 4
.el .IP "\fI\s-1OR:\s0\fR \f(CWparent_matches => { and/or => [ qr/listref of/, qr/regexps/ ] }\fR" 4
.IX Item "OR: parent_matches => { and/or => [ qr/listref of/, qr/regexps/ ] }"
.PD
Return only files and subdirectory names whose parent directory matches the
regex(es) you specify.
.RE
.RS 4
.RE
.ie n .IP "Examples of matching and filtering results in ""listdir()""" 4
.el .IP "Examples of matching and filtering results in \f(CWlistdir()\fR" 4
.IX Item "Examples of matching and filtering results in listdir()"
Single-argument matching examples
.Sp
.Vb 3
\&   my @files = $f\->list_dir(
\&      \*(Aq../notes\*(Aq => { files_match => qr/\e.txt$/i, files_only => 1 }
\&   );
\&
\&   my @dirs = $f\->list_dir(
\&      \*(Aq/var\*(Aq => {
\&         dirs_match => qr/log|spool/i,
\&         recurse => 1,
\&         dirs_only => 1,
\&      }
\&   );
\&
\&   my @dirs = $f\->list_dir(
\&      \*(Aq/home\*(Aq => {
\&         path_matches => qr/Desktop/,
\&         recurse => 1,
\&         dirs_only => 1,
\&      }
\&   );
\&
\&   my @files = $f\->list_dir(
\&      \*(Aq/home/tommy/projects\*(Aq => {
\&         parent_matches => qr/^\e.git$/,
\&         recurse => 1,
\&      }
\&   );
.Ve
.Sp
A multiple-argument matching examples with \fB\s-1OR\s0\fR
.Sp
.Vb 6
\&   my @files = $f\->list_dir(
\&      \*(AqC:\eUsers\eBilly G\*(Aq => {
\&         parent_matches => { or => [ qr/Desktop/, qr/Pictures/ ] }
\&         recurse => 1,
\&      }
\&   );
\&
\&   # ... same concepts apply to "files_match", "dirs_match",
\&   #     and "parent_matches" filtering
.Ve
.Sp
Multiple-argument matching examples with \fB\s-1AND\s0\fR
.Sp
.Vb 6
\&   my @files = $f\->list_dir(
\&      \*(Aq/home/leia\*(Aq => {
\&         parent_matches => { and => [ qr/Anakin/, qr/Amidala/ ] }
\&         recurse => 1,
\&      }
\&   );
\&
\&   my @files = $f\->list_dir(
\&      \*(Aq/home/mace\*(Aq => {
\&         path_matches => { and => [ qr/^(?!.*dark.side)/i, qr/[Ff]orce/ ] }
\&         recurse => 1,
\&      }
\&   );
\&
\&   # ... same concepts apply to "files_match" and "dirs_match" filtering
.Ve
.Sp
\&\fB**When you specify regexes for more than one filter type parameter\fR, the
patterns are \fI\s-1AND\s0'ed\fR together, as you'd expect, and all matching criteria must
be satisfied for a successful overall match.
.Sp
.Vb 9
\&   my @files = $f\->list_dir(
\&      \*(Aq/var\*(Aq => {
\&         dirs_match     => { or => [ qr/^log$/,   qr/^lib$/    ] },
\&         files_match    => { or => [ qr/^syslog/, qr/\e.isam$/i ] },
\&         parent_matches => qr/[[:alpha:]]+/
\&         path_matches   => qr/^(?!.*home)/,
\&         recurse     => 1,
\&         files_only  => 1,
\&      }
.Ve
.Sp
\&\fBNegative matches\fR (when you want to \s-1NOT\s0 match something) \- use Perl!
.Sp
As shown in the File::Util::Manual::Examples, Perl already provides
support for negated matching in the form of \*(L"zero-width negative assertions\*(R".
(See perlre for details on how they work).  Use syntax like the regular
expressions below to match anything that is \s-1NOT\s0 part of the subpattern.
.Sp
.Vb 4
\&   # match all files with names that do NOT contain "apple" (case sensitive)
\&   my @no_apples = $f\->list_dir(
\&      \*(AqPictures/fruit\*(Aq => { files_match => qr/^(?!.*apple)/ }
\&   );
\&
\&   # match all files that that do NOT end in *.mp3 (case INsensitive)
\&   # also, don\*(Aqt match files that end in *.wav either
\&   my @no_music = $f\->list_dir(
\&      \*(Aq/opt/music\*(Aq => {
\&         files_match => { and => [ qr/^(?!.*mp3$)/i, qr/^(?!.*wav$)/i ]
\&      }
\&   );
.Ve
.RE
.RS 4
.RE
.ie n .SS """load_dir"""
.el .SS "\f(CWload_dir\fP"
.IX Subsection "load_dir"
.ie n .IP "\fISyntax:\fR ""load_dir( [directory name] => { options } )""" 4
.el .IP "\fISyntax:\fR \f(CWload_dir( [directory name] => { options } )\fR" 4
.IX Item "Syntax: load_dir( [directory name] => { options } )"
Returns a data structure containing the contents of each file present in the
named directory.
.Sp
The type of data structure returned is determined by the optional data-type
option parameter.  Only one option at a time may be used for a given call
to this method.  Recognized options are listed below.
.Sp
.Vb 1
\&   my $files_hash_ref = $f\->load_dir( $dirname ); # default (hashref)
\&
\&      \-OR\-
\&
\&   my $files_list_ref = $f\->load_dir( $dirname => { as_listref => 1 } );
\&
\&      \-OR\-
\&
\&   my @files = $f\->load_dir( $dirname => { as_list => 1 } );
.Ve
.RS 4
.ie n .IP "\fBOptions accepted by \f(CB""load_dir()""\fB\fR" 4
.el .IP "\fBOptions accepted by \f(CBload_dir()\fB\fR" 4
.IX Item "Options accepted by load_dir()"
.RS 4
.PD 0
.ie n .IP """as_hashref => boolean"" *(default)" 4
.el .IP "\f(CWas_hashref => boolean\fR *(default)" 4
.IX Item "as_hashref => boolean *(default)"
.PD
Implicit.  If no option is passed in, the default behavior is to return a
reference to an anonymous hash whose keys are the names of each file in the
specified directory; the hash values for contain the contents of the file
represented by its corresponding key.
.ie n .IP """as_list => boolean""" 4
.el .IP "\f(CWas_list => boolean\fR" 4
.IX Item "as_list => boolean"
Causes the method to return a list comprised of the contents loaded from
each file (in case-sensitive order) located in the named directory.
.Sp
This is useful in situations where you don't care what the filenames were
and you just want a list of file contents.
.ie n .IP """as_listref => boolean""" 4
.el .IP "\f(CWas_listref => boolean\fR" 4
.IX Item "as_listref => boolean"
Same as above, except an array reference to the list of items is returned
rather than the list itself.  This is more efficient than the above,
particularly when dealing with large lists.
.RE
.RS 4
.Sp
\&\f(CW\*(C`load_dir()\*(C'\fR does not recurse or accept matching parameters, etc.  It's an
effective tool for loading up things like a directory of template files on
a web server, or to store binary data streams in memory.  Use it however you
like.
.Sp
However, if you do want to load files into a hashref/listref or array while
using the advanced features of \f(CW\*(C`list_dir()\*(C'\fR, just use list_dir to return the
files and map the contents into your variable:
.Sp
.Vb 1
\&   my $hash_ref = {};
\&
\&   %$hash_ref = map { $_ => $ftl\->load_file( $_ ) }
\&                $ftl\->list_dir( $dir_name => { advanced options... } );
.Ve
.RE
.RE
.RS 4
.Sp
\&\fBNote:\fR This method does not distinguish between plain files and other file
types such as binaries, FIFOs, sockets, etc.
.Sp
Restrictions imposed by the current \*(L"read limit\*(R"
\&\fI(see the \fIread_limit()\fI) entry below\fR will be applied to the
individual files opened by this method as well.  Adjust the read limit as
necessary.
.Sp
Example usage:
.Sp
.Vb 1
\&   my $templates = $f\->load_dir( \*(Aqtemplates/stock\-ticker\*(Aq );
.Ve
.Sp
The above code creates an anonymous hash reference that is stored in the
variable named "\f(CW$files\fR\*(L".  The keys and values of the hash referenced by
\&\*(R"\f(CW$files\fR" would resemble those of the following code snippet (given that
the files in the named directory were the files 'a.txt', 'b.html', 'c.dat',
and 'd.conf')
.Sp
.Vb 7
\&   my $files =
\&      {
\&         \*(Aqa.txt\*(Aq  => \*(Aqthe contents of file a.txt\*(Aq,
\&         \*(Aqb.html\*(Aq => \*(Aqthe contents of file b.html\*(Aq,
\&         \*(Aqc.dat\*(Aq  => \*(Aqthe contents of file c.dat\*(Aq,
\&         \*(Aqd.conf\*(Aq => \*(Aqthe contents of file d.conf\*(Aq,
\&      };
.Ve
.RE
.ie n .SS """load_file"""
.el .SS "\f(CWload_file\fP"
.IX Subsection "load_file"
.ie n .IP "\fISyntax:\fR ""load_file( [file name] => { options } )""" 4
.el .IP "\fISyntax:\fR \f(CWload_file( [file name] => { options } )\fR" 4
.IX Item "Syntax: load_file( [file name] => { options } )"
.PD 0
.ie n .IP "\fI\s-1OR:\s0\fR ""load_file( file_handle => [file handle reference] => { options } )""" 4
.el .IP "\fI\s-1OR:\s0\fR \f(CWload_file( file_handle => [file handle reference] => { options } )\fR" 4
.IX Item "OR: load_file( file_handle => [file handle reference] => { options } )"
.PD
If [file name] is passed, returns the contents of [file name] in a string.
If a [file handle reference] is passed instead, the filehandle will be
\&\f(CW\*(C`CORE::read()\*(C'\fR and the data obtained by the read will be returned in a string.
.Sp
If you desire the contents of the file (or file handle data) in a list of
lines instead of a single string, this can be accomplished through the use
of the \f(CW\*(C`as_lines\*(C'\fR option (see below).
.RS 4
.ie n .IP "\fBOptions accepted by \f(CB""load_file()""\fB\fR" 4
.el .IP "\fBOptions accepted by \f(CBload_file()\fB\fR" 4
.IX Item "Options accepted by load_file()"
.RS 4
.PD 0
.ie n .IP """as_lines => boolean""" 4
.el .IP "\f(CWas_lines => boolean\fR" 4
.IX Item "as_lines => boolean"
.PD
If this option is enabled then your call to \f(CW\*(C`load_file\*(C'\fR will return a list of
strings, each one of which is a line as it was read from the file [file name].
The lines are returned in the order they are read, from the beginning of the
file to the end.
.Sp
This is not the default behavior.  The default behavior is for \f(CW\*(C`load_file\*(C'\fR to
return a single string containing the entire contents of the file.
.ie n .IP """no_lock => boolean""" 4
.el .IP "\f(CWno_lock => boolean\fR" 4
.IX Item "no_lock => boolean"
By default this method will attempt to get a lock on the file while it is
being read, following whatever rules are in place for the flock policy
established either by default (implicitly) or changed by you in a call to
\&\fIFile::Util::flock_rules()\fR
\&\fI(see the \fIflock_rules()\fI) entry below\fR.
.Sp
This method will not try to get a lock on the file if the File::Util object was
created with the option \f(CW\*(C`no_lock\*(C'\fR or if the method was called with the
option \f(CW\*(C`no_lock\*(C'\fR.
.Sp
This method will automatically call \fIbinmode()\fR on binary files for you.  If you
pass in a filehandle instead of a file name you do not get this automatic
check performed for you.  In such a case, you'll have to call \fIbinmode()\fR on
the filehandle yourself.  Once you pass a filehandle to this method it has no
way of telling if the file opened to that filehandle is binary or not.
.ie n .IP """binmode => [ boolean or \*(Aqutf8\*(Aq ]""" 4
.el .IP "\f(CWbinmode => [ boolean or \*(Aqutf8\*(Aq ]\fR" 4
.IX Item "binmode => [ boolean or utf8 ]"
Tell File::Util to read the file in binmode (if set to a true boolean: \fB\f(CB1\fB\fR),
or to read the file as \s-1UTF\-8\s0 encoded data, specify a value of \fB\f(CB\*(C`utf8\*(C'\fB\fR to this
option.  \fI(see \*(L"binmode\*(R" in perlfunc)\fR.
.Sp
You need Perl 5.8 or better to use \f(CW\*(Aqutf8\*(Aq\fR or your program will fail with
an error message.
.Sp
Example Usage:
.Sp
.Vb 1
\&   my $encoded_data = $ftl\->load_file( \*(Aqencoded.txt\*(Aq => { binmode => \*(Aqutf8\*(Aq } );
.Ve
.ie n .IP """read_limit => positive integer""" 4
.el .IP "\f(CWread_limit => positive integer\fR" 4
.IX Item "read_limit => positive integer"
Override the global read limit setting for the File::Util object you are working
with, on a one time basis.  By specifying a this option with a positive integer
value (representing the maximum number of bytes to allow for your \f(CW\*(C`load_file()\*(C'\fR
call), you are telling \f(CW\*(C`load_file()\*(C'\fR to ignore the global/default setting for
\&\fIjust that call\fR, and to apply your one-time limit of [ positive integer ]
bytes on the file while it is read into memory.
.Sp
\&\fBNotes:\fR This method does not distinguish between plain files and other file
types such as binaries, FIFOs, sockets, etc.
.Sp
Restrictions imposed by the current \*(L"read limit\*(R"
\&\fI(see the \fIread_limit()\fI) entry below\fR will be applied to the
files opened by this method.  Adjust the read limit as necessary either
by overriding (using the \f(CW\*(Aqread_limit\*(Aq\fR option above), or by adjusting the
global value for your File::Util object with the provided
\&\fIread_limit()\fR object method.
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .SS """make_dir"""
.el .SS "\f(CWmake_dir\fP"
.IX Subsection "make_dir"
.ie n .IP "\fISyntax:\fR ""make_dir( [new directory name], [bitmask] => { options } )""" 4
.el .IP "\fISyntax:\fR \f(CWmake_dir( [new directory name], [bitmask] => { options } )\fR" 4
.IX Item "Syntax: make_dir( [new directory name], [bitmask] => { options } )"
Attempts to create (recursively) a directory as [new directory name] with
the [bitmask] provided.  The bitmask is an optional argument and defaults to
oct 777, \fBcombined with the current user's umask\fR.  If specified, the bitmask
must be supplied in the form required by the native perl umask function (as
an octal number).  \fIsee \*(L"umask\*(R" in perlfunc\fR for more information about the
format of the bitmask argument.
.Sp
As mentioned above, the recursive creation of directories is transparently
handled for you.  This means that if the name of the directory you pass in
contains a parent directory that does not exist, the parent directory(ies) will
be created for you automatically and silently in order to create the final
directory in the [new directory name].
.Sp
Simply put, if [new directory] is \*(L"/path/to/directory\*(R" and the directory
\&\*(L"/path/to\*(R" does not exist, the directory \*(L"/path/to\*(R" will be created and the
\&\*(L"/path/to/directory\*(R" directory will be created thereafter.  All directories
created will be created with the [bitmask] you specify, or with the default
of oct 777, \fBcombined with the current user's umask\fR.
.Sp
Upon successful creation of the [new directory name], the [new directory name]
is returned to the caller.
.RS 4
.ie n .IP "\fBOptions accepted by \f(CB""make_dir()""\fB\fR" 4
.el .IP "\fBOptions accepted by \f(CBmake_dir()\fB\fR" 4
.IX Item "Options accepted by make_dir()"
.RS 4
.PD 0
.ie n .IP """if_not_exists => boolean""" 4
.el .IP "\f(CWif_not_exists => boolean\fR" 4
.IX Item "if_not_exists => boolean"
.PD
Example:
.Sp
.Vb 1
\&   $f\->make_dir( \*(Aq/home/jspice\*(Aq => oct 755 => { if_not_exists => 1 } );
.Ve
.Sp
If this option is enabled then make_dir will not attempt to create the directory
if it already exists.  Rather it will return the name of the directory as it
normally would if the directory did not exist previous to calling this method.
.Sp
If a call to this method is made without the \f(CW\*(C`if_not_exists\*(C'\fR option and the
directory specified as [new directory name] does in fact exist, an error will
result as it is impossible to create a directory that already exists.
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .SS """abort_depth"""
.el .SS "\f(CWabort_depth\fP"
.IX Subsection "abort_depth"
.ie n .IP "\fISyntax:\fR ""abort_depth( [positive integer] )""" 4
.el .IP "\fISyntax:\fR \f(CWabort_depth( [positive integer] )\fR" 4
.IX Item "Syntax: abort_depth( [positive integer] )"
When called without any arguments, this method returns an integer reflecting
the current number of times the File::Util object will dive into the
subdirectories it discovers when recursively listing directory contents from
a call to \f(CW\*(C`File::Util::list_dir()\*(C'\fR.  The default is 1000.  If the number is
exceeded, the File::Util object will fail with an error.
.Sp
When called with an argument, it sets the maximum number of times a File::Util
object will recurse into subdirectories before failing with an error message.
.Sp
This method can only be called with a numeric integer value.  Passing a bad
argument to this method will cause it to fail with an error.
.Sp
\&\fI(see also: list_dir)\fR
.ie n .SS """needs_binmode"""
.el .SS "\f(CWneeds_binmode\fP"
.IX Subsection "needs_binmode"
.ie n .IP "\fISyntax:\fR ""needs_binmode""" 4
.el .IP "\fISyntax:\fR \f(CWneeds_binmode\fR" 4
.IX Item "Syntax: needs_binmode"
Returns 1 if the machine on which the code is running requires that \f(CW\*(C`binmode()\*(C'\fR
\&\fI(a built-in function)\fR be called on open file handles, or returns 0 if not.
\&\fI(see \*(L"binmode\*(R" in perlfunc.)\fR  This is a constant method.  It accepts no
arguments and will always return the same value for the system on which it
is executed.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.ie n .IP "\fISyntax:\fR ""new( { options } )""" 4
.el .IP "\fISyntax:\fR \f(CWnew( { options } )\fR" 4
.IX Item "Syntax: new( { options } )"
This is the File::Util constructor method.  It returns a new File::Util
object reference when you call it.  It recognizes various options that govern
the behavior of the new File::Util object.
.RS 4
.ie n .IP "\fBParameters accepted by \f(CB""new()""\fB\fR" 4
.el .IP "\fBParameters accepted by \f(CBnew()\fB\fR" 4
.IX Item "Parameters accepted by new()"
.RS 4
.PD 0
.ie n .IP """use_flock => boolean""" 4
.el .IP "\f(CWuse_flock => boolean\fR" 4
.IX Item "use_flock => boolean"
.PD
Optionally specify this option to the \f(CW\*(C`File::Util::new\*(C'\fR method to instruct the
new object that it should never attempt to use \f(CW\*(C`flock()\*(C'\fR in it's I/O
operations.  The default is to use \f(CW\*(C`flock()\*(C'\fR if available on your system.
Specify this option with a true or false value ( 1 or 0 ), true to use
\&\f(CW\*(C`flock()\*(C'\fR, false to not use it.
.ie n .IP """read_limit => positive integer""" 4
.el .IP "\f(CWread_limit => positive integer\fR" 4
.IX Item "read_limit => positive integer"
Optionally specify this option to the File::Util::new method to instruct the
new object that it should never attempt to open and read in a file greater
than the number of bytes you specify.  This argument can only be
a numeric integer value, otherwise it will be \fIsilently ignored.\fR  The default
read limit for File::Util objects is 52428800 bytes (50 megabytes).
.ie n .IP """abort_depth => positive integer""" 4
.el .IP "\f(CWabort_depth => positive integer\fR" 4
.IX Item "abort_depth => positive integer"
Optionally specify this option to the File::Util::new method to instruct the
new object to set the maximum number of times it will recurse into
subdirectories while performing directory listing operations before failing
with an error message.  This argument can only be a numeric integer value,
otherwise it will be \fIsilently ignored.\fR
.Sp
\&\fI(see also: \fIabort_depth()\fI)\fR
.ie n .IP "\fB\f(CB""onfail => designated handler""\fB\fR" 4
.el .IP "\fB\f(CBonfail => designated handler\fB\fR" 4
.IX Item "onfail => designated handler"
Set the \fIdefault\fR policy for how the new File::Util object handles fatal
errors.  This option takes any one of a list of predefined keywords, or a
reference to a named or anonymous error handling subroutine of your own.
.Sp
You can supply an \f(CW\*(C`onfail\*(C'\fR handler to nearly any function in File::Util, but
when you do so for the \f(CW\*(C`new()\*(C'\fR constructor, you are setting the \fIdefault\fR.
.Sp
Acceptable values are all covered in the \fB\s-1ERROR HANDLING\s0\fR
section (above), along with proper syntax and example usage.
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .SS """onfail"""
.el .SS "\f(CWonfail\fP"
.IX Subsection "onfail"
.ie n .IP "\fISyntax:\fR ""onfail( [keyword or code reference] )""" 4
.el .IP "\fISyntax:\fR \f(CWonfail( [keyword or code reference] )\fR" 4
.IX Item "Syntax: onfail( [keyword or code reference] )"
Dynamically set/change the default error handling policy for an object.
.Sp
This works exactly the same as it does when you specify an \*(L"onfail\*(R"
handler to the constructor method (\fIsee also \f(CI\*(C`new\*(C'\fI\fR).
.Sp
The syntax and keywords available to use for this method are already discussed
above in the \s-1ERROR HANDLING\s0 section, so refer to that for
in-depth details.
.Sp
Here are some examples:
.Sp
.Vb 1
\&   $ftl\->onfail( \*(Aqdie\*(Aq );
\&
\&   $ftl\->onfail( \*(Aqzero\*(Aq );
\&
\&   $ftl\->onfail( \*(Aqundefined\*(Aq );
\&
\&   $ftl\->onfail( \*(Aqmessage\*(Aq );
\&
\&   $ftl\->onfail( \e&subroutine_reference );
\&
\&   $ftl\->onfail( sub { my ( $error, $stack_trace ) = @_; ... } );
.Ve
.ie n .SS """open_handle"""
.el .SS "\f(CWopen_handle\fP"
.IX Subsection "open_handle"
.ie n .IP "\fISyntax:\fR ""open_handle( [file name] => [mode] => { options } )""" 4
.el .IP "\fISyntax:\fR \f(CWopen_handle( [file name] => [mode] => { options } )\fR" 4
.IX Item "Syntax: open_handle( [file name] => [mode] => { options } )"
.PD 0
.ie n .IP "\fI\s-1OR:\s0\fR ""open_handle( file => [file name] => mode => [mode] => { options } )""" 4
.el .IP "\fI\s-1OR:\s0\fR \f(CWopen_handle( file => [file name] => mode => [mode] => { options } )\fR" 4
.IX Item "OR: open_handle( file => [file name] => mode => [mode] => { options } )"
.PD
Attempts to get a lexically scoped open file handle on [file name] in [mode]
mode.  Returns the file handle if successful or generates a fatal error with a
diagnostic message if the operation fails.
.Sp
You will need to remember to call \f(CW\*(C`close()\*(C'\fR on the filehandle yourself, at
your own discretion.  Leaving filehandles open is not a good practice, and
is not recommended.  \fIsee \*(L"close\*(R" in perlfunc\fR).
.Sp
Once you have the file handle you would use it as you would use any file handle.
Remember that unless you specifically turn file locking off when the
\&\f(CW\*(C`File::Util\*(C'\fR object is created \fI(see new)\fR or by using the
\&\f(CW\*(C`no_lock\*(C'\fR option when calling \f(CW\*(C`open_handle\*(C'\fR, that file locking is going to
automagically be handled for you behind the scenes, so long as your \s-1OS\s0 supports
file locking of any kind at all.  Great!  It's very convenient for you to not
have to worry about portability in taking care of file locking between one
application and the next; by using \f(CW\*(C`File::Util\*(C'\fR in all of them, you know
that you're covered.
.Sp
A slight inconvenience for the price of a larger set of features (compare
write_file to this method)
\&\fI\f(BIyou will have to release the file lock on the open handle yourself.\fI\fR
\&\f(CW\*(C`File::Util\*(C'\fR can't manage it for you anymore once it turns the handle over
to you.  At that point, it's all yours.  In order to release the file lock
on your file handle, call \fIunlock_open_handle()\fR on it.
Otherwise the lock will remain for the life of your process.  If you don't
want to use the free portable file locking, remember the \f(CW\*(C`no_lock\*(C'\fR option,
which will turn off file locking for your open handle.  Seldom, however, should
you ever opt to not use file locking unless you really know what you are doing.
The only obvious exception would be if you are working with files on a
network-mounted filesystem like \s-1NFS\s0 or \s-1SMB\s0 (\s-1CIFS\s0), in which case locking can
be buggy.
.Sp
If the file does not yet exist it will be created, and it will be created
with a bitmask of [bitmask] if you specify a file creation bitmask using
the \f(CW\*(Aqbitmask\*(Aq\fR option, otherwise the file will be created with the default
bitmask of oct 777.  The bitmask is combined with the current user's umask,
whether you specify a value or not.  This is a function of Perl,
not File::Util.
.Sp
If specified, the bitmask must be supplied in the form of an octal number as
required by the native perl umask function.  \fISee \*(L"umask\*(R" in perlfunc\fR for
more information about the format of the bitmask argument.  If the file
[file name] already exists then the bitmask argument has no effect and is
silently ignored.
.Sp
Any non-existent directories in the path preceding the actual file name will
be automatically (and silently \- no warnings) created for you and any new
directories will be created with a bitmask of [dbitmask], provided you specify
a directory creation bitmask with the \f(CW\*(Aqdbitmask\*(Aq\fR option.
.Sp
If specified, the directory creation bitmask [dbitmask] must be supplied in
the form required by the native perl umask function.
.Sp
If there is an error while trying to create any preceding directories, the
failure results in a fatal error with an error.  If all
directories preceding the name of the file already exist, the dbitmask
argument has no effect and is silently ignored.
.IP "\fBNative Perl open modes\fR" 4
.IX Item "Native Perl open modes"
The default behavior of \f(CW\*(C`open_handle()\*(C'\fR is to open file handles using Perl's
native \f(CW\*(C`open()\*(C'\fR \fI(see \*(L"open\*(R" in perlfunc)\fR.  Unless you use the
\&\f(CW\*(C`use_sysopen\*(C'\fR option, only then are the following modes valid:
.RS 4
.ie n .IP """mode => \*(Aqread\*(Aq"" (this is the default mode)" 4
.el .IP "\f(CWmode => \*(Aqread\*(Aq\fR (this is the default mode)" 4
.IX Item "mode => read (this is the default mode)"
[file name] is opened in read-only mode.  If the file does not yet exist then
a fatal error will occur.
.ie n .IP """mode => \*(Aqwrite\*(Aq""" 4
.el .IP "\f(CWmode => \*(Aqwrite\*(Aq\fR" 4
.IX Item "mode => write"
[file name] is created if it does not yet exist.  If [file name] already exists
then its contents are overwritten with the new content provided.
.ie n .IP """mode => \*(Aqappend\*(Aq""" 4
.el .IP "\f(CWmode => \*(Aqappend\*(Aq\fR" 4
.IX Item "mode => append"
[file name] is created if it does not yet exist.  If [file name] already exists
its contents will be preserved and the new content you provide will be appended
to the end of the file.
.RE
.RS 4
.RE
.ie n .IP "\fBSystem level open modes (""open a la C"")\fR" 4
.el .IP "\fBSystem level open modes (``open a la C'')\fR" 4
.IX Item "System level open modes (open a la C)"
Optionally you can ask \f(CW\*(C`File::Util\*(C'\fR to open your handle using \f(CW\*(C`CORE::sysopen\*(C'\fR
instead of using the native Perl \f(CW\*(C`CORE::open()\*(C'\fR.  This is accomplished by
enabling the \f(CW\*(C`use_sysopen\*(C'\fR option.  Using this feature opens up more
possibilities as far as the open modes you can choose from, but also carries
with it a few caveats so you have to be careful, just as you'd have to be a
little more careful when using \f(CW\*(C`sysopen()\*(C'\fR anyway.
.Sp
Specifically you need to remember that when using this feature you must \s-1NOT\s0
mix different types of I/O when working with the file handle.  You can't go
opening file handles with \f(CW\*(C`sysopen()\*(C'\fR and print to them as you normally
would print to a file handle.  You have to use \f(CW\*(C`syswrite()\*(C'\fR instead.  The
same applies here.  If you get a \f(CW\*(C`sysopen()\*(C'\fR'd filehandle from \f(CW\*(C`open_handle()\*(C'\fR
it is imperative that you use \f(CW\*(C`syswrite()\*(C'\fR on it.  You'll also need to use
\&\f(CW\*(C`sysseek()\*(C'\fR and other type of \f(CW\*(C`sys\*(C'\fR* commands on the filehandle instead of
their native Perl equivalents.
.Sp
(see \*(L"sysopen\*(R" in perlfunc, \*(L"syswrite\*(R" in perlfunc, \*(L"sysseek\*(R" in perlfunc,
\&\*(L"sysread\*(R" in perlfunc)
.Sp
That said, here are the different modes you can choose from to get a file handle
when using the \f(CW\*(C`use_sysopen\*(C'\fR option.  Remember that these won't work unless
you use that option, and will generate an error if you try using them without it.
The standard \f(CW\*(Aqread\*(Aq\fR, \f(CW\*(Aqwrite\*(Aq\fR, and \f(CW\*(Aqappend\*(Aq\fR modes are already available
to you by default.  These are the extended modes:
.RS 4
.ie n .IP """mode => \*(Aqrwcreate\*(Aq""" 4
.el .IP "\f(CWmode => \*(Aqrwcreate\*(Aq\fR" 4
.IX Item "mode => rwcreate"
[file name] is opened in read-write mode, and will be created for you if it
does not already exist.
.ie n .IP """mode => \*(Aqrwupdate\*(Aq""" 4
.el .IP "\f(CWmode => \*(Aqrwupdate\*(Aq\fR" 4
.IX Item "mode => rwupdate"
[file name] is opened for you in read-write mode, but must already exist.  If
it does not exist, a fatal error will result.
.ie n .IP """mode => \*(Aqrwclobber\*(Aq""" 4
.el .IP "\f(CWmode => \*(Aqrwclobber\*(Aq\fR" 4
.IX Item "mode => rwclobber"
[file name] is opened for you in read-write mode.  If the file already exists
it's contents will be \*(L"clobbered\*(R" or wiped out.  The file will then be empty
and you will be working with the then-truncated file.  This can not be undone.
Once you call \f(CW\*(C`open_handle()\*(C'\fR using this option, your file \s-1WILL\s0 be wiped out.
If the file does not exist yet, it will be created for you.
.ie n .IP """mode => \*(Aqrwappend\*(Aq""" 4
.el .IP "\f(CWmode => \*(Aqrwappend\*(Aq\fR" 4
.IX Item "mode => rwappend"
[file name] will be opened for you in read-write mode ready for appending.  The
file's contents will not be wiped out; they will be preserved and you will be
working in append fashion.  If the file does not exist, it will be created
for you.
.RE
.RS 4
.Sp
Remember to use \f(CW\*(C`sysread()\*(C'\fR and not plain \f(CW\*(C`read()\*(C'\fR when reading those
\&\f(CW\*(C`sysopen()\*(C'\fR'd filehandles!
.RE
.ie n .IP "\fBOptions accepted by \f(CB""open_handle()""\fB\fR" 4
.el .IP "\fBOptions accepted by \f(CBopen_handle()\fB\fR" 4
.IX Item "Options accepted by open_handle()"
.RS 4
.PD 0
.ie n .IP """binmode => [ boolean or \*(Aqutf8\*(Aq ]""" 4
.el .IP "\f(CWbinmode => [ boolean or \*(Aqutf8\*(Aq ]\fR" 4
.IX Item "binmode => [ boolean or utf8 ]"
.PD
Tell File::Util to open the file in binmode (if set to a true boolean: \fB\f(CB1\fB\fR),
or to open the file with \s-1UTF\-8\s0 encoding, specify a value of \fB\f(CB\*(C`utf8\*(C'\fB\fR to this
option.  \fI(see \*(L"binmode\*(R" in perlfunc)\fR.
.Sp
You need Perl 5.8 or better to use \f(CW"utf8"\fR or your program will fail with
an error message.
.Sp
Example Usage:
.Sp
.Vb 1
\&   $ftl\->open_handle( \*(Aqencoded.txt\*(Aq => { binmode => \*(Aqutf8\*(Aq } );
.Ve
.ie n .IP """no_lock => boolean""" 4
.el .IP "\f(CWno_lock => boolean\fR" 4
.IX Item "no_lock => boolean"
By default this method will attempt to get a lock on the file while it is
being read, following whatever rules are in place for the flock policy
established either by default (implicitly) or changed by you in a call to
\&\fIFile::Util::flock_rules()\fR
\&\fI(see \fIflock_rules()\fI)\fR.
.Sp
This method will not try to get a lock on the file if the File::Util object was
created with the option \f(CW\*(C`no_lock\*(C'\fR or if this method is called with the
option \f(CW\*(C`no_lock\*(C'\fR.
.ie n .IP """use_sysopen => boolean""" 4
.el .IP "\f(CWuse_sysopen => boolean\fR" 4
.IX Item "use_sysopen => boolean"
Instead of opening the file using Perl's native \f(CW\*(C`open()\*(C'\fR command, \f(CW\*(C`File::Util\*(C'\fR
will open the file with the \f(CW\*(C`sysopen()\*(C'\fR command.  You will have to remember
that your filehandle is a \f(CW\*(C`sysopen()\*(C'\fR'd one, and that you will not be able to
use native Perl I/O functions on it.  You will have to use the \f(CW\*(C`sys\*(C'\fR*
equivalents.  See perlopentut for a more in-depth explanation of why you
can't mix native Perl I/O with system I/O.
.RE
.RS 4
.RE
.ie n .SS """read_limit"""
.el .SS "\f(CWread_limit\fP"
.IX Subsection "read_limit"
.ie n .IP "\fISyntax:\fR ""read_limit( [positive integer] )""" 4
.el .IP "\fISyntax:\fR \f(CWread_limit( [positive integer] )\fR" 4
.IX Item "Syntax: read_limit( [positive integer] )"
By default, the largest size file that File::Util will read into memory and
return via the load_file is 52428800 bytes (50 megabytes).
.Sp
This value can be modified by calling this method with an integer value
reflecting the new limit you want to impose, in bytes.  For example, if you want
to set the limit to 10 megabytes, call the method with an argument of 10485760.
.Sp
If this method is called without an argument, the read limit currently in force
for the File::Util object will be returned.
.ie n .SS """return_path"""
.el .SS "\f(CWreturn_path\fP"
.IX Subsection "return_path"
.ie n .IP "\fISyntax:\fR ""return_path( [string] )""" 4
.el .IP "\fISyntax:\fR \f(CWreturn_path( [string] )\fR" 4
.IX Item "Syntax: return_path( [string] )"
Takes the file path from the file name provided and returns it such that
\&\f(CW\*(C`/who/you/callin/scruffy.txt\*(C'\fR is returned as \f(CW\*(C`/who/you/callin\*(C'\fR.
.Sp
This method is optimized for speed and returns anything that could possibly
be a file path, even if that means the path is actually \f(CW\*(C`foo.bar\*(C'\fR if you
passed it such an argument.  Technically, you could indeed have a directory
named \f(CW\*(C`blaster.txt\*(C'\fR, so this method doesn't distinguish between strings
that look like file names and ones that don't.
.Sp
If you want one that does, you need to use \f(CW\*(C`strict_path()\*(C'\fR instead.
\&\fI(see strict_path)\fR
.ie n .SS """size"""
.el .SS "\f(CWsize\fP"
.IX Subsection "size"
.ie n .IP "\fISyntax:\fR ""size( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWsize( [file name] )\fR" 4
.IX Item "Syntax: size( [file name] )"
Returns the file size of [file name] in bytes.  Returns \f(CW0\fR if the file is
empty. Returns \f(CW\*(C`undef\*(C'\fR if the file does not exist.
.ie n .SS """split_path"""
.el .SS "\f(CWsplit_path\fP"
.IX Subsection "split_path"
.ie n .IP "\fISyntax:\fR ""split_path( [string] )""" 4
.el .IP "\fISyntax:\fR \f(CWsplit_path( [string] )\fR" 4
.IX Item "Syntax: split_path( [string] )"
Takes a path/filename, fully-qualified or relative (it doesn't matter), and it
returns a list comprising the root of the path (if any), each directory in
the path, and the final part of the path (be it a file, a directory, or
otherwise)
.Sp
This method doesn't divine or detect any information about the path, it simply
manipulates the string value.  It doesn't map it to any real filesystem object.
It doesn't matter whether or not the file/path named in the input string
exists or not.
.ie n .SS """strict_path"""
.el .SS "\f(CWstrict_path\fP"
.IX Subsection "strict_path"
.ie n .IP "\fISyntax:\fR ""strict_path( [string] )""" 4
.el .IP "\fISyntax:\fR \f(CWstrict_path( [string] )\fR" 4
.IX Item "Syntax: strict_path( [string] )"
Works just like \f(CW\*(C`return_path()\*(C'\fR except that it is more
strict in what it returns.  If you pass it a string that does not \*(L"look\*(R"
like a path (a string with no directory separators or that is not \f(CW\*(C`.\*(C'\fR or
\&\f(CW\*(C`..\*(C'\fR), then this method will return \f(CW\*(C`undef\*(C'\fR.
.Sp
If you'd like to get a default path string returned instead of \f(CW\*(C`undef\*(C'\fR, then
you want to use the \f(CW\*(C`default_path()\*(C'\fR method instead.
.Sp
\&\fI(see also return_path and default_path)\fR
.ie n .SS """strip_path"""
.el .SS "\f(CWstrip_path\fP"
.IX Subsection "strip_path"
.ie n .IP "\fISyntax:\fR ""strip_path( [string] )""" 4
.el .IP "\fISyntax:\fR \f(CWstrip_path( [string] )\fR" 4
.IX Item "Syntax: strip_path( [string] )"
Strips the file path from the file name provided and returns the file name only.
.Sp
Given \f(CW\*(C`/kessel/run/12/parsecs\*(C'\fR, it returns \f(CW\*(C`parsecs\*(C'\fR
.Sp
Given \f(CW\*(C`C:\eyou\escoundrel\*(C'\fR, it returns \f(CW\*(C`scoundrel\*(C'\fR
.ie n .SS """touch"""
.el .SS "\f(CWtouch\fP"
.IX Subsection "touch"
.ie n .IP "\fISyntax:\fR ""touch( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWtouch( [file name] )\fR" 4
.IX Item "Syntax: touch( [file name] )"
Behaves like the *nix \f(CW\*(C`touch\*(C'\fR command; Updates the access and modification
times of the specified file to the current time.  If the file does not exist,
\&\f(CW\*(C`File::Util\*(C'\fR tries to create it empty.  This method will fail with a fatal
error if system permissions deny alterations to or creation of the file.
.Sp
Returns \f(CW1\fR if successful.  If unsuccessful, fails with an error.
.ie n .SS """trunc"""
.el .SS "\f(CWtrunc\fP"
.IX Subsection "trunc"
.ie n .IP "\fISyntax:\fR ""trunc( [file name] )""" 4
.el .IP "\fISyntax:\fR \f(CWtrunc( [file name] )\fR" 4
.IX Item "Syntax: trunc( [file name] )"
Truncates [file name] (i.e.\- wipes out, or \*(L"clobbers\*(R" the contents of the
specified file.)  Returns \f(CW1\fR if successful.  If unsuccessful, fails with a
descriptive error message about what went wrong.
.ie n .SS """unlock_open_handle"""
.el .SS "\f(CWunlock_open_handle\fP"
.IX Subsection "unlock_open_handle"
.ie n .IP "\fISyntax:\fR ""unlock_open_handle([file handle])""" 4
.el .IP "\fISyntax:\fR \f(CWunlock_open_handle([file handle])\fR" 4
.IX Item "Syntax: unlock_open_handle([file handle])"
Release the flock on a file handle you opened with open_handle.
.Sp
Returns true on success, false on failure.  Will not raise a fatal error if
the unlock operation fails.  You can capture the return value from your call
to this method and \f(CW\*(C`die()\*(C'\fR if you so desire.  Failure is not ever very likely,
or \f(CW\*(C`File::Util\*(C'\fR wouldn't have been able to get a portable lock on the file
in the first place.
.Sp
If \f(CW\*(C`File::Util\*(C'\fR wasn't able to ever lock the file due to limitations of your
operating system, a call to this method will return a true value.
.Sp
If file locking has been disabled on the file handle via the \f(CW\*(C`no_lock\*(C'\fR option
at the time open_handle was called, or if file locking was
disabled using the use_flock method, or if file locking was
disabled on the entire \f(CW\*(C`File::Util\*(C'\fR object at the time of its creation
\&\fI(see \fInew()\fI)\fR, calling this method will have no effect and a true value
will be returned.
.ie n .SS """use_flock"""
.el .SS "\f(CWuse_flock\fP"
.IX Subsection "use_flock"
.ie n .IP "\fISyntax:\fR ""use_flock( [true / false value] )""" 4
.el .IP "\fISyntax:\fR \f(CWuse_flock( [true / false value] )\fR" 4
.IX Item "Syntax: use_flock( [true / false value] )"
When called without any arguments, this method returns a true or false value
to reflect the current use of \f(CW\*(C`flock()\*(C'\fR within the File::Util object.
.Sp
When called with a true or false value as its single argument, this method
will tell the File::Util object whether or not it should attempt to use
\&\f(CW\*(C`flock()\*(C'\fR in its I/O operations.  A true value indicates that the File::Util
object will use \f(CW\*(C`flock()\*(C'\fR if available, a false value indicates that it will
not.  The default is to use \f(CW\*(C`flock()\*(C'\fR when available on your system.
.RS 4
.IP "\fI\f(BI\s-1DON\s0'T \s-1USE FLOCK ON NETWORK FILESYSTEMS\s0\fI\fR" 4
.IX Item "DON'T USE FLOCK ON NETWORK FILESYSTEMS"
If you are working with files on an \s-1NFS\s0 mount, or a Windows file share, it
is quite likely that using flock will be buggy and cause unexpected failures
in your program.  You should not use flock in such situations.
.IP "\fI\f(BIA \s-1WORD OF CAUTION FOR SOLARIS USERS\s0\fI\fR" 4
.IX Item "A WORD OF CAUTION FOR SOLARIS USERS"
File locking has known issues on \fB\s-1SOLARIS\s0\fR.  Solaris claims to offer
a native \f(CW\*(C`flock()\*(C'\fR implementation, but after obtaining a lock on a file,
Solaris will very often just silently refuse to unlock it again until
your process has completely exited.  This is not an issue with File::Util or
even with Perl itself.  Other programming languages encounter the same
problems; it is a system-level issue.  So please be aware of this if you are
a Solaris user and want to use file locking on your \s-1OS.\s0
.Sp
You may have to explicitly disable file locking completely.
.RE
.RS 4
.RE
.ie n .SS """write_file"""
.el .SS "\f(CWwrite_file\fP"
.IX Subsection "write_file"
.ie n .IP "\fISyntax:\fR ""write_file( [file name] => [string] => { other_options } )""" 4
.el .IP "\fISyntax:\fR \f(CWwrite_file( [file name] => [string] => { other_options } )\fR" 4
.IX Item "Syntax: write_file( [file name] => [string] => { other_options } )"
.PD 0
.ie n .IP "\fI\s-1OR:\s0\fR ""write_file( { file => [file name], content => [string], mode => [mode], other_options } )""" 4
.el .IP "\fI\s-1OR:\s0\fR \f(CWwrite_file( { file => [file name], content => [string], mode => [mode], other_options } )\fR" 4
.IX Item "OR: write_file( { file => [file name], content => [string], mode => [mode], other_options } )"
.PD
Syntax Examples:
.Sp
.Vb 2
\&   # get some content (a string returned from a function call, perhaps)
\&   my $answer = ask_commissioner( \*(AqCan he be trusted?\*(Aq );
\&
\&   $ftl\->write_file( \*(AqHarvey_Dent.txt\*(Aq => $answer );
\&
\&      \-OR\-
\&
\&   # get some binary content, maybe a picture...
\&   my $binary_data = get_mugshot( alias => \*(Aqtwoface\*(Aq );
\&
\&   $ftl\->write_file( \*(Aqsuspect.png\*(Aq => $binary_data => { binmode => 1 } );
\&
\&      \-OR\-
\&
\&   # write a file with UTF\-8 encoding (unicode character support)
\&   $ftl\->write_file( \*(Aqencoded.txt\*(Aq => $encoded_data => { binmode => \*(Aqutf8\*(Aq } );
\&
\&      \-OR\-
\&
\&   $ftl\->write_file(
\&      {
\&         file    => \*(Aq/gotham/city/ballots/Bruce_Wayne.txt\*(Aq,
\&         content => \*(AqVote for Harvey!\*(Aq,
\&         bitmask => oct 600, # <\- secret ballot file permissions
\&      }
\&   );
.Ve
.Sp
Attempts to write [string] to [file name] in mode [mode].  If the file does
not yet exist it will be created, and it will be created with a bitmask of
[bitmask] if you specify a file creation bitmask using the \f(CW\*(Aqbitmask\*(Aq\fR option,
otherwise the file will be created with the default bitmask of oct 777.
The bitmask is combined with the current user's umask, whether you specify a
value or not.  This is a function of Perl, not File::Util.
.Sp
[string] should be a string or a scalar variable containing a string.  The
string can be any type of data, such as a binary stream, or ascii text with
line breaks, etc.  Be sure to enable the \f(CW\*(C`binmode => 1\*(C'\fR option for binary
streams, and be sure to specify a value of \f(CW\*(C`binmode => \*(Aqutf8\*(Aq\*(C'\fR for \s-1UTF\-8\s0
encoded data.
.Sp
\&\s-1NOTE:\s0 that you will need Perl version 5.8 or better to use the \f(CW\*(Aqutf8\*(Aq\fR
feature, or your program will fail with an error.
.Sp
If specified, the bitmask must be supplied in the form of an octal number,
as required by the native perl umask function.  \fIsee \*(L"umask\*(R" in perlfunc\fR
for more information about the format of the bitmask argument.  If the file
[file name] already exists then the bitmask argument has no effect and is
silently ignored.
.Sp
Returns 1 if successful or fails with an error if not successful.
.Sp
Any non-existent directories in the path preceding the actual file name will
be automatically (and silently \- no warnings) created for you and new
directories will be created with a bitmask of [dbitmask], provided you specify
a directory creation bitmask with the \f(CW\*(Aqdbitmask\*(Aq\fR option.
.Sp
If specified, the directory creation bitmask [dbitmask] must be supplied in
the form required by the native perl umask function.
.Sp
If there is a problem while trying to create any preceding directories, the
failure results in a fatal error.  If all directories preceding the name of
the file already exist, the dbitmask argument has no effect and is silently
ignored.
.RS 4
.ie n .IP """mode => \*(Aqwrite\*(Aq"" (this is the default mode)" 4
.el .IP "\f(CWmode => \*(Aqwrite\*(Aq\fR (this is the default mode)" 4
.IX Item "mode => write (this is the default mode)"
[file name] is created if it does not yet exist.  If [file name] already exists
then its contents are overwritten with the new content provided.
.ie n .IP """mode => \*(Aqappend\*(Aq""" 4
.el .IP "\f(CWmode => \*(Aqappend\*(Aq\fR" 4
.IX Item "mode => append"
[file name] is created if it does not yet exist.  If [file name] already exists
its contents will be preserved and the new content you provide will be appended
to the end of the file.
.RE
.RS 4
.ie n .IP "\fBOptions accepted by \f(CB""write_file()""\fB\fR" 4
.el .IP "\fBOptions accepted by \f(CBwrite_file()\fB\fR" 4
.IX Item "Options accepted by write_file()"
.RS 4
.PD 0
.ie n .IP """binmode => [ boolean or \*(Aqutf8\*(Aq ]""" 4
.el .IP "\f(CWbinmode => [ boolean or \*(Aqutf8\*(Aq ]\fR" 4
.IX Item "binmode => [ boolean or utf8 ]"
.PD
Tell File::Util to write the file in binmode (if set to a true boolean: \fB\f(CB1\fB\fR),
or to write the file with \s-1UTF\-8\s0 encoding, specify a value of \fB\f(CB\*(C`utf8\*(C'\fB\fR to this
option.  \fI(see \*(L"binmode\*(R" in perlfunc)\fR.
.Sp
You need Perl 5.8 or better to use \f(CW"utf8"\fR or your program will fail with
an error message.
.Sp
Example Usage:
.Sp
.Vb 1
\&   $ftl\->write_file( \*(Aqencoded.txt\*(Aq => $encoded_data => { binmode => \*(Aqutf8\*(Aq } );
.Ve
.ie n .IP """empty_writes_OK => boolean""" 4
.el .IP "\f(CWempty_writes_OK => boolean\fR" 4
.IX Item "empty_writes_OK => boolean"
Allows you to call this method without providing a content argument (it lets
you create an empty file without warning you or failing.  Be advised that
if you enable this option, it will have the same effect as truncating a file
that already has content in it (i.e.\- it will \*(L"clobber\*(R" non-empty files)
.ie n .IP """no_lock => boolean""" 4
.el .IP "\f(CWno_lock => boolean\fR" 4
.IX Item "no_lock => boolean"
By default this method will attempt to get a lock on the file while it is
being read, following whatever rules are in place for the flock policy
established either by default (implicitly) or changed by you in a call to
\&\fIFile::Util::flock_rules()\fR
\&\fI(see \fIflock_rules()\fI)\fR.
.Sp
This method will not try to get a lock on the file if the File::Util object was
created with the option \f(CW\*(C`no_lock\*(C'\fR or if this method is called with the
option \f(CW\*(C`no_lock\*(C'\fR enabled.
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .SS """valid_filename"""
.el .SS "\f(CWvalid_filename\fP"
.IX Subsection "valid_filename"
.ie n .IP "\fISyntax:\fR ""valid_filename( [string] )""" 4
.el .IP "\fISyntax:\fR \f(CWvalid_filename( [string] )\fR" 4
.IX Item "Syntax: valid_filename( [string] )"
For the given string, returns 1 if the string is a legal file name for the
system on which the program is running, or returns undef if it is not.  This
method does not test for the validity of file paths!  It tests for the validity
of file names only.  (It is used internally to check beforehand if a file name
is usable when creating new files, but is also a public method available for
external use.)
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.ie n .SS """NL"""
.el .SS "\f(CWNL\fP"
.IX Subsection "NL"
.ie n .IP "\fISyntax:\fR ""NL""" 4
.el .IP "\fISyntax:\fR \f(CWNL\fR" 4
.IX Item "Syntax: NL"
Short for "\fBN\fRew \fBL\fRine".  Returns the correct new line character (or character
sequence) for the system on which your program runs.
.ie n .SS """SL"""
.el .SS "\f(CWSL\fP"
.IX Subsection "SL"
.ie n .IP "\fISyntax:\fR ""SL""" 4
.el .IP "\fISyntax:\fR \f(CWSL\fR" 4
.IX Item "Syntax: SL"
Short for "\fBSl\fRash". Returns the correct directory path separator for the system on
which your program runs.
.ie n .SS """OS"""
.el .SS "\f(CWOS\fP"
.IX Subsection "OS"
.ie n .IP "\fISyntax:\fR ""OS""" 4
.el .IP "\fISyntax:\fR \f(CWOS\fR" 4
.IX Item "Syntax: OS"
Returns the File::Util keyword for the operating system \fB\s-1FAMILY\s0\fR it detected.
The keyword for the detected operating system will be one of the following,
derived from the contents of \f(CW$^O\fR, or if \f(CW$^O\fR can not be found, from the
contents of \f(CW$Config::Config{osname}\fR (see native Config library), or if
that doesn't contain a recognizable value, finally falls back to \f(CW\*(C`UNIX\*(C'\fR.
.Sp
Generally speaking, Linux operating systems are going to be detected as \f(CW\*(C`UNIX\*(C'\fR.
This isn't a bug.  The \s-1OS FAMILY\s0 to which it belongs uses \f(CW\*(C`UNIX\*(C'\fR style
filesystem conventions and line endings, which are the relevant things to
file handling operations.
.RS 4
.IP "\s-1UNIX\s0" 4
.IX Item "UNIX"
Specifics: \s-1OS\s0 name =~ /^(?:darwin|bsdos)/i
.IP "\s-1CYGWIN\s0" 4
.IX Item "CYGWIN"
Specifics: \s-1OS\s0 name =~ /^cygwin/i
.IP "\s-1WINDOWS\s0" 4
.IX Item "WINDOWS"
Specifics: \s-1OS\s0 name =~ /^MSWin/i
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
Specifics: \s-1OS\s0 name =~ /^vms/i
.IP "\s-1DOS\s0" 4
.IX Item "DOS"
Specifics: \s-1OS\s0 name =~ /^dos/i
.IP "\s-1MACINTOSH\s0" 4
.IX Item "MACINTOSH"
Specifics: \s-1OS\s0 name =~ /^MacOS/i
.IP "\s-1EPOC\s0" 4
.IX Item "EPOC"
Specifics: \s-1OS\s0 name =~ /^epoc/i
.IP "\s-1OS2\s0" 4
.IX Item "OS2"
Specifics: \s-1OS\s0 name =~ /^os2/i
.RE
.RS 4
.RE
.SH "AUTHORS"
.IX Header "AUTHORS"
Tommy Butler <http://www.atrixnet.com/contact>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright(C) 2001\-2013, Tommy Butler.  All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software, you may redistribute it and/or modify it
under the same terms as Perl itself. For more details, see the full text of
the \s-1LICENSE\s0 file that is included in this distribution.
.SH "LIMITATION OF WARRANTY"
.IX Header "LIMITATION OF WARRANTY"
This software is distributed in the hope that it will be useful, but without
any warranty; without even the implied warranty of merchantability or fitness
for a particular purpose.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Util::Cookbook, File::Util::Manual::Examples, File::Util
