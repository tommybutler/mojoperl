.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Protocol::Redis::Faster 3"
.TH Protocol::Redis::Faster 3 "2019-09-01" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Protocol::Redis::Faster \- Optimized pure\-perl Redis protocol parser/encoder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Protocol::Redis::Faster;
\&  my $redis = Protocol::Redis::Faster\->new(api => 1) or die "API v1 not supported";
\&
\&  $redis\->parse("+foo\er\en");
\&
\&  # get parsed message
\&  my $message = $redis\->get_message;
\&  print "parsed message: ", $message\->{data}, "\en";
\&
\&  # asynchronous parsing interface
\&  $redis\->on_message(sub {
\&      my ($redis, $message) = @_;
\&      print "parsed message: ", $message\->{data}, "\en";
\&  });
\&
\&  # parse pipelined message
\&  $redis\->parse("+bar\er\en\-error\er\en");
\&
\&  # create message
\&  print "Get key message:\en",
\&    $redis\->encode({type => \*(Aq*\*(Aq, data => [
\&       {type => \*(Aq$\*(Aq, data => \*(Aqstring\*(Aq},
\&       {type => \*(Aq+\*(Aq, data => \*(AqOK\*(Aq}
\&  ]});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the Protocol::Redis \s-1API\s0 with more optimized pure-perl
internals. See Protocol::Redis for usage documentation.
.PP
This is a low level parsing module, if you are looking to use Redis in Perl,
try Redis, Redis::hiredis, or Mojo::Redis.
.SH "BUGS"
.IX Header "BUGS"
Report any issues on the public bugtracker.
.SH "AUTHORS"
.IX Header "AUTHORS"
Dan Book <dbook@cpan.org>
.PP
Jan Henning Thorsen <jhthorsen@cpan.org>
.SH "CREDITS"
.IX Header "CREDITS"
Thanks to Sergey Zasenko <undef@cpan.org> for the original Protocol::Redis
and defining the \s-1API.\s0
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2019 by Dan Book, Jan Henning Thorsen.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Protocol::Redis
