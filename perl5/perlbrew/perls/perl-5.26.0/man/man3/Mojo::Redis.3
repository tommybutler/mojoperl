.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mojo::Redis 3"
.TH Mojo::Redis 3 "2019-05-07" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Redis \- Redis driver based on Mojo::IOLoop
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Blocking"
.IX Subsection "Blocking"
.Vb 3
\&  use Mojo::Redis;
\&  my $redis = Mojo::Redis\->new;
\&  warn $redis\->db\->get("mykey");
.Ve
.SS "Promises"
.IX Subsection "Promises"
.Vb 5
\&  $redis\->db\->get_p("mykey")\->then(sub {
\&    print "mykey=$_[0]\en";
\&  })\->catch(sub {
\&    warn "Could not fetch mykey: $_[0]";
\&  })\->wait;
.Ve
.SS "Pipelining"
.IX Subsection "Pipelining"
Pipelining is built into the \s-1API\s0 by sending a lot of commands and then use
\&\*(L"all\*(R" in Mojo::Promise to wait for all the responses.
.PP
.Vb 10
\&  Mojo::Promise\->all(
\&    $db\->set_p($key, 10),
\&    $db\->incrby_p($key, 9),
\&    $db\->incr_p($key),
\&    $db\->get_p($key),
\&    $db\->incr_p($key),
\&    $db\->get_p($key),
\&  )\->then(sub {
\&    @res = map {@$_} @_;
\&  })\->wait;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Redis is a Redis driver that use the Mojo::IOLoop, which makes it
integrate easily with the Mojolicious framework.
.PP
It tries to mimic the same interface as Mojo::Pg, Mojo::mysql and
Mojo::SQLite, but the methods for talking to the database vary.
.PP
This module is in no way compatible with the 1.xx version of Mojo::Redis
and this version also tries to fix a lot of the confusing methods in
Mojo::Redis2 related to pubsub.
.PP
This module is currently \s-1EXPERIMENTAL,\s0 and bad design decisions will be fixed
without warning. Please report at
<https://github.com/jhthorsen/mojo\-redis/issues> if you find this module
useful, annoying or if you simply find bugs. Feedback can also be sent to
\&\f(CW\*(C`jhthorsen@cpan.org\*(C'\fR.
.SH "EVENTS"
.IX Header "EVENTS"
.SS "connection"
.IX Subsection "connection"
.Vb 1
\&  $cb = $redis\->on(connection => sub { my ($redis, $connection) = @_; });
.Ve
.PP
Emitted when Mojo::Redis::Connection connects to the Redis.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "encoding"
.IX Subsection "encoding"
.Vb 2
\&  $str   = $redis\->encoding;
\&  $redis = $redis\->encoding("UTF\-8");
.Ve
.PP
The value of this attribute will be passed on to
\&\*(L"encoding\*(R" in Mojo::Redis::Connection when a new connection is created. This
means that updating this attribute will not change any connection that is
in use.
.PP
Default value is \*(L"\s-1UTF\-8\*(R".\s0
.SS "max_connections"
.IX Subsection "max_connections"
.Vb 2
\&  $int   = $redis\->max_connections;
\&  $redis = $redis\->max_connections(5);
.Ve
.PP
Maximum number of idle database handles to cache for future use, defaults to
5. (Default is subject to change)
.SS "protocol_class"
.IX Subsection "protocol_class"
.Vb 2
\&  $str   = $redis\->protocol_class;
\&  $redis = $redis\->protocol_class("Protocol::Redis::XS");
.Ve
.PP
Default to Protocol::Redis::XS if the optional module is available and at
least version 0.06, or falls back to Protocol::Redis::Faster.
.SS "pubsub"
.IX Subsection "pubsub"
.Vb 1
\&  $pubsub = $redis\->pubsub;
.Ve
.PP
Lazy builds an instance of Mojo::Redis::PubSub for this object, instead of
returning a new instance like \*(L"db\*(R" does.
.SS "url"
.IX Subsection "url"
.Vb 2
\&  $url   = $redis\->url;
\&  $redis = $redis\->url(Mojo::URL\->new("redis://localhost/3"));
.Ve
.PP
Holds an instance of Mojo::URL that describes how to connect to the Redis server.
.SH "METHODS"
.IX Header "METHODS"
.SS "db"
.IX Subsection "db"
.Vb 1
\&  $db = $redis\->db;
.Ve
.PP
Returns an instance of Mojo::Redis::Database.
.SS "cache"
.IX Subsection "cache"
.Vb 1
\&  $cache = $redis\->cache(%attrs);
.Ve
.PP
Returns an instance of Mojo::Redis::Cache.
.SS "cursor"
.IX Subsection "cursor"
.Vb 1
\&  $cursor = $redis\->cursor(@command);
.Ve
.PP
Returns an instance of Mojo::Redis::Cursor with
\&\*(L"command\*(R" in Mojo::Redis::Cursor set to the arguments passed. See
\&\*(L"new\*(R" in Mojo::Redis::Cursor. for possible commands.
.SS "new"
.IX Subsection "new"
.Vb 4
\&  $redis = Mojo::Redis\->new("redis://localhost:6379/1");
\&  $redis = Mojo::Redis\->new(Mojo::URL\->new\->host("/tmp/redis.sock"));
\&  $redis = Mojo::Redis\->new(\e%attrs);
\&  $redis = Mojo::Redis\->new(%attrs);
.Ve
.PP
Object constructor. Can coerce a string into a Mojo::URL and set \*(L"url\*(R"
if present.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jan Henning Thorsen \- \f(CW\*(C`jhthorsen@cpan.org\*(C'\fR
.PP
Dan Book \- \f(CW\*(C`grinnz@grinnz.com\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2018, Jan Henning Thorsen.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Redis2.
