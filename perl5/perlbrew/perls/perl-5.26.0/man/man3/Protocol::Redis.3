.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Protocol::Redis 3"
.TH Protocol::Redis 3 "2019-12-25" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Protocol::Redis \- Redis protocol parser/encoder with asynchronous capabilities.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Protocol::Redis;
\&    my $redis = Protocol::Redis\->new(api => 1) or die "API v1 not supported";
\&
\&    $redis\->parse("+foo\er\en");
\&
\&    # get parsed message
\&    my $message = $redis\->get_message;
\&    print "parsed message: ", $message\->{data}, "\en";
\&
\&    # asynchronous parsing interface
\&    $redis\->on_message(sub {
\&        my ($redis, $message) = @_;
\&        print "parsed message: ", $message\->{data}, "\en";
\&    });
\&
\&    # parse pipelined message
\&    $redis\->parse("+bar\er\en\-error\er\en");
\&
\&    # create message
\&    print "Get key message:\en",
\&      $redis\->encode({type => \*(Aq*\*(Aq, data => [
\&         {type => \*(Aq$\*(Aq, data => \*(Aqstring\*(Aq},
\&         {type => \*(Aq+\*(Aq, data => \*(AqOK\*(Aq}
\&    ]});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Redis protocol parser/encoder with asynchronous capabilities and pipelining <http://redis.io/topics/pipelining> support.
.SH "APIv1"
.IX Header "APIv1"
Protocol::Redis APIv1 uses
"Unified Request Protocol <http://redis.io/topics/protocol>" for message
encoding/parsing and supports methods described further. Client libraries
should specify \s-1API\s0 version during Protocol::Redis construction.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 2
\&    my $redis = Protocol::Redis\->new(api => 1)
\&        or die "API v1 not supported";
.Ve
.PP
Construct Protocol::Redis object with specific \s-1API\s0 version support.
If specified \s-1API\s0 version not supported constructor returns undef.
Client libraries should always specify \s-1API\s0 version.
.ie n .SS """parse"""
.el .SS "\f(CWparse\fP"
.IX Subsection "parse"
.Vb 1
\&    $redis\->parse("*2\er\en$4ping\er\en\er\en");
.Ve
.PP
Parse Redis protocol chunk.
.ie n .SS """get_message"""
.el .SS "\f(CWget_message\fP"
.IX Subsection "get_message"
.Vb 3
\&    while (my $message = $redis\->get_message) {
\&        ...
\&    }
.Ve
.PP
Get parsed message or undef.
.ie n .SS """on_message"""
.el .SS "\f(CWon_message\fP"
.IX Subsection "on_message"
.Vb 2
\&    $redis\->on_message(sub {
\&        my ($redis, $message) = @_;
\&
\&    }
.Ve
.PP
Calls callback on each parsed message.
.ie n .SS """encode"""
.el .SS "\f(CWencode\fP"
.IX Subsection "encode"
.Vb 4
\&    my $string = $redis\->encode({type => \*(Aq+\*(Aq, data => \*(Aqtest\*(Aq});
\&    $string = $redis\->encode(
\&        {type => \*(Aq*\*(Aq, data => [
\&            {type => \*(Aq$\*(Aq, data => \*(Aqtest\*(Aq}]});
.Ve
.PP
Encode data into redis message.
.ie n .SS """api"""
.el .SS "\f(CWapi\fP"
.IX Subsection "api"
.Vb 1
\&    my $api_version = $redis\->api;
.Ve
.PP
Get \s-1API\s0 version.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "\s-1IRC\s0"
.IX Subsection "IRC"
.Vb 1
\&    #redis on irc.perl.org
.Ve
.SH "DEVELOPMENT"
.IX Header "DEVELOPMENT"
.SS "Repository"
.IX Subsection "Repository"
.Vb 1
\&    http://github.com/und3f/protocol\-redis
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Sergey Zasenko, \f(CW\*(C`undef@cpan.org\*(C'\fR.
.SH "CREDITS"
.IX Header "CREDITS"
In alphabetical order
.Sp
.RS 2
Dan Book (Grinnz)
.Sp
David Leadbeater (dgl)
.Sp
Jan Henning Thorsen (jhthorsen)
.Sp
Viacheslav Tykhanovskyi (vti)
.Sp
Yaroslav Korshak (yko)
.RE
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011\-2019, Sergey Zasenko.
.PP
This program is free software, you can redistribute it and/or modify it under
the same terms as Perl 5.10.
