.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::NotYAMLConfig 3"
.TH Mojolicious::Plugin::NotYAMLConfig 3 "2021-06-30" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::NotYAMLConfig \- Not quite YAML configuration plugin
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # myapp.yml (it\*(Aqs just YAML with embedded Perl)
\&  \-\-\-
\&  foo: bar
\&  baz:
\&    \- â™¥
\&  music_dir: <%= app\->home\->child(\*(Aqmusic\*(Aq) %>
\&
\&  # Mojolicious
\&  my $config = $app\->plugin(\*(AqNotYAMLConfig\*(Aq);
\&  say $config\->{foo};
\&
\&  # Mojolicious::Lite
\&  my $config = plugin \*(AqNotYAMLConfig\*(Aq;
\&  say $config\->{foo};
\&
\&  # foo.html.ep
\&  %= config\->{foo}
\&
\&  # The configuration is available application\-wide
\&  my $config = app\->config;
\&  say $config\->{foo};
\&
\&  # Everything can be customized with options
\&  my $config = plugin NotYAMLConfig => {file => \*(Aq/etc/myapp.conf\*(Aq};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::NotYAMLConfig is a \s-1YAML\s0 configuration plugin that preprocesses its input with Mojo::Template.
By default it uses CPAN::Meta::YAML for parsing, which is not the best \s-1YAML\s0 module available, but good enough for
most config files. If you need something more correct you can use a different module like \s-1YAML::XS\s0 with the
\&\*(L"module\*(R" option.
.PP
The application object can be accessed via \f(CW$app\fR or the \f(CW\*(C`app\*(C'\fR function. A default configuration filename in the
application home directory will be generated from the value of \*(L"moniker\*(R" in Mojolicious (\f(CW\*(C`$moniker.yml\*(C'\fR). You can
extend the normal configuration file \f(CW\*(C`$moniker.yml\*(C'\fR with \f(CW\*(C`mode\*(C'\fR specific ones like \f(CW\*(C`$moniker.$mode.yml\*(C'\fR, which will
be detected automatically.
.PP
These configuration values are currently reserved:
.ie n .IP """config_override""" 2
.el .IP "\f(CWconfig_override\fR" 2
.IX Item "config_override"
If this configuration value has been set in \*(L"config\*(R" in Mojolicious when this plugin is loaded, it will not do anything
besides loading deployment specific plugins.
.ie n .IP """plugins""" 2
.el .IP "\f(CWplugins\fR" 2
.IX Item "plugins"
.Vb 4
\&  plugins:
\&    \- SetUserGroup:
\&        user: sri
\&        group: staff
.Ve
.Sp
One or more deployment specific plugins that should be loaded right after this plugin has been loaded.
.PP
The code of this plugin is a good example for learning to build new plugins, you're welcome to fork it.
.PP
See \*(L"\s-1PLUGINS\*(R"\s0 in Mojolicious::Plugins for a list of plugins that are available by default.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::NotYAMLConfig inherits all options from Mojolicious::Plugin::JSONConfig and supports the
following new ones.
.SS "module"
.IX Subsection "module"
.Vb 2
\&  # Mojolicious::Lite
\&  plugin NotYAMLConfig => {module => \*(AqYAML::PP\*(Aq};
.Ve
.PP
Alternative \s-1YAML\s0 module to use for parsing.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::NotYAMLConfig inherits all methods from Mojolicious::Plugin::JSONConfig and implements the
following new ones.
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&  $plugin\->parse($content, $file, $conf, $app);
.Ve
.PP
Process content with \*(L"render\*(R" in Mojolicious::Plugin::JSONConfig and parse it with CPAN::Meta::YAML.
.PP
.Vb 6
\&  sub parse ($self, $content, $file, $conf, $app) {
\&    ...
\&    $content = $self\->render($content, $file, $conf, $app);
\&    ...
\&    return $hash;
\&  }
.Ve
.SS "register"
.IX Subsection "register"
.Vb 2
\&  my $config = $plugin\->register(Mojolicious\->new);
\&  my $config = $plugin\->register(Mojolicious\->new, {file => \*(Aq/etc/foo.conf\*(Aq});
.Ve
.PP
Register plugin in Mojolicious application and merge configuration.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <https://mojolicious.org>.
