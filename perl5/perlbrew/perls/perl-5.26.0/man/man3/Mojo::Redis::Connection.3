.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mojo::Redis::Connection 3"
.TH Mojo::Redis::Connection 3 "2019-05-04" "perl v5.26.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Redis::Connection \- Low level connection class for talking to Redis
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Redis::Connection;
\&
\&  my $conn = Mojo::Redis::Connection\->new(
\&               ioloop   => Mojo::IOLoop\->singleton,
\&               protocol => Protocol::Redis::Faster\->new(api => 1),
\&               url      => Mojo::URL\->new("redis://localhost"),
\&             );
\&
\&  $conn\->write_p("GET some_key")\->then(sub { print "some_key=$_[0]" })\->wait;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Redis::Connection is a low level driver for writing and reading data
from a Redis server.
.PP
You probably want to use Mojo::Redis instead of this class.
.SH "EVENTS"
.IX Header "EVENTS"
.SS "close"
.IX Subsection "close"
.Vb 1
\&  $cb = $conn\->on(close => sub { my ($conn) = @_; });
.Ve
.PP
Emitted when the connection to the redis server gets closed.
.SS "connect"
.IX Subsection "connect"
.Vb 1
\&  $cb = $conn\->on(connect => sub { my ($conn) = @_; });
.Ve
.PP
Emitted right after a connection is established to the Redis server, but
after the \s-1AUTH\s0 and \s-1SELECT\s0 commands are queued.
.SS "error"
.IX Subsection "error"
.Vb 1
\&  $cb = $conn\->on(error => sub { my ($conn, $error) = @_; });
.Ve
.PP
Emitted if there's a connection error or the Redis server emits an error, and
there's not a promise to handle the message.
.SS "response"
.IX Subsection "response"
.Vb 1
\&  $cb = $conn\->on(response => sub { my ($conn, $res) = @_; });
.Ve
.PP
Emitted if \*(L"write_q\*(R" is not passed a Mojo::Promise as the last argument,
or if the Redis server emits a message that is not handled.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "encoding"
.IX Subsection "encoding"
.Vb 2
\&  $str  = $conn\->encoding;
\&  $conn = $conn\->encoding("UTF\-8");
.Ve
.PP
Holds the character encoding to use for data from/to Redis. Set to \f(CW\*(C`undef\*(C'\fR
to disable encoding/decoding data. Without an encoding set, Redis expects and
returns bytes. See also \*(L"encoding\*(R" in Mojo::Redis.
.SS "ioloop"
.IX Subsection "ioloop"
.Vb 2
\&  $loop = $conn\->ioloop;
\&  $conn = $conn\->ioloop(Mojo::IOLoop\->new);
.Ve
.PP
Holds an instance of Mojo::IOLoop.
.SS "protocol"
.IX Subsection "protocol"
.Vb 2
\&  $protocol = $conn\->protocol;
\&  $conn     = $conn\->protocol(Protocol::Redis::XS\->new(api => 1));
.Ve
.PP
Holds a protocol object, such as Protocol::Redis::Faster that is used to
generate and parse Redis messages.
.SS "url"
.IX Subsection "url"
.Vb 3
\&  $url  = $conn\->url;
\&  $conn = $conn\->url(Mojo::URL\->new\->host("/tmp/redis.sock")\->path("/5"));
\&  $conn = $conn\->url("redis://localhost:6379/1");
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "disconnect"
.IX Subsection "disconnect"
.Vb 1
\&  $conn = $conn\->disconnect;
.Ve
.PP
Used to disconnect from the Redis server.
.SS "is_connected"
.IX Subsection "is_connected"
.Vb 1
\&  $bool = $conn\->is_connected;
.Ve
.PP
True if a connection to the Redis server is established.
.SS "write_p"
.IX Subsection "write_p"
.Vb 1
\&  $promise = $conn\->write_p($command => @args);
.Ve
.PP
Will write a command to the Redis server and establish a connection if not
already connected and returns a Mojo::Promise. The arguments will be
passed on to \*(L"write_q\*(R".
.SS "write_q"
.IX Subsection "write_q"
.Vb 2
\&  $conn = $conn\->write_q(@command => @args, Mojo::Promise\->new);
\&  $conn = $conn\->write_q(@command => @args, undef);
.Ve
.PP
Will enqueue a Redis command and either resolve/reject the Mojo::Promise
or emit a \*(L"error\*(R" or \*(L"response\*(R" event when the Redis server responds.
.PP
This method is \s-1EXPERIMENTAL\s0 and currently meant for internal use.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Redis
